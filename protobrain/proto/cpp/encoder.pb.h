// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: encoder.proto

#ifndef PROTOBUF_INCLUDED_encoder_2eproto
#define PROTOBUF_INCLUDED_encoder_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_encoder_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_encoder_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_encoder_2eproto();
namespace protobrain {
class CyclicEncoder;
class CyclicEncoderDefaultTypeInternal;
extern CyclicEncoderDefaultTypeInternal _CyclicEncoder_default_instance_;
class Encoder;
class EncoderDefaultTypeInternal;
extern EncoderDefaultTypeInternal _Encoder_default_instance_;
class SensorValue;
class SensorValueDefaultTypeInternal;
extern SensorValueDefaultTypeInternal _SensorValue_default_instance_;
class SimpleEncoder;
class SimpleEncoderDefaultTypeInternal;
extern SimpleEncoderDefaultTypeInternal _SimpleEncoder_default_instance_;
}  // namespace protobrain
namespace google {
namespace protobuf {
template<> ::protobrain::CyclicEncoder* Arena::CreateMaybeMessage<::protobrain::CyclicEncoder>(Arena*);
template<> ::protobrain::Encoder* Arena::CreateMaybeMessage<::protobrain::Encoder>(Arena*);
template<> ::protobrain::SensorValue* Arena::CreateMaybeMessage<::protobrain::SensorValue>(Arena*);
template<> ::protobrain::SimpleEncoder* Arena::CreateMaybeMessage<::protobrain::SimpleEncoder>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace protobrain {

enum Encoder_EncoderType {
  Encoder_EncoderType_UNKNOWN = 0,
  Encoder_EncoderType_NUMERICAL_SIMPLE = 1,
  Encoder_EncoderType_NUMERICAL_CYCLIC = 2
};
bool Encoder_EncoderType_IsValid(int value);
const Encoder_EncoderType Encoder_EncoderType_EncoderType_MIN = Encoder_EncoderType_UNKNOWN;
const Encoder_EncoderType Encoder_EncoderType_EncoderType_MAX = Encoder_EncoderType_NUMERICAL_CYCLIC;
const int Encoder_EncoderType_EncoderType_ARRAYSIZE = Encoder_EncoderType_EncoderType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Encoder_EncoderType_descriptor();
inline const ::std::string& Encoder_EncoderType_Name(Encoder_EncoderType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Encoder_EncoderType_descriptor(), value);
}
inline bool Encoder_EncoderType_Parse(
    const ::std::string& name, Encoder_EncoderType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Encoder_EncoderType>(
    Encoder_EncoderType_descriptor(), name, value);
}
// ===================================================================

class Encoder :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobrain.Encoder) */ {
 public:
  Encoder();
  virtual ~Encoder();

  Encoder(const Encoder& from);

  inline Encoder& operator=(const Encoder& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Encoder(Encoder&& from) noexcept
    : Encoder() {
    *this = ::std::move(from);
  }

  inline Encoder& operator=(Encoder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Encoder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Encoder* internal_default_instance() {
    return reinterpret_cast<const Encoder*>(
               &_Encoder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Encoder* other);
  friend void swap(Encoder& a, Encoder& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Encoder* New() const final {
    return CreateMaybeMessage<Encoder>(nullptr);
  }

  Encoder* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Encoder>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Encoder& from);
  void MergeFrom(const Encoder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Encoder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Encoder_EncoderType EncoderType;
  static const EncoderType UNKNOWN =
    Encoder_EncoderType_UNKNOWN;
  static const EncoderType NUMERICAL_SIMPLE =
    Encoder_EncoderType_NUMERICAL_SIMPLE;
  static const EncoderType NUMERICAL_CYCLIC =
    Encoder_EncoderType_NUMERICAL_CYCLIC;
  static inline bool EncoderType_IsValid(int value) {
    return Encoder_EncoderType_IsValid(value);
  }
  static const EncoderType EncoderType_MIN =
    Encoder_EncoderType_EncoderType_MIN;
  static const EncoderType EncoderType_MAX =
    Encoder_EncoderType_EncoderType_MAX;
  static const int EncoderType_ARRAYSIZE =
    Encoder_EncoderType_EncoderType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  EncoderType_descriptor() {
    return Encoder_EncoderType_descriptor();
  }
  static inline const ::std::string& EncoderType_Name(EncoderType value) {
    return Encoder_EncoderType_Name(value);
  }
  static inline bool EncoderType_Parse(const ::std::string& name,
      EncoderType* value) {
    return Encoder_EncoderType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated int32 shape = 2;
  int shape_size() const;
  void clear_shape();
  static const int kShapeFieldNumber = 2;
  ::google::protobuf::int32 shape(int index) const;
  void set_shape(int index, ::google::protobuf::int32 value);
  void add_shape(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      shape() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_shape();

  // optional .protobrain.Encoder.EncoderType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::protobrain::Encoder_EncoderType type() const;
  void set_type(::protobrain::Encoder_EncoderType value);

  GOOGLE_PROTOBUF_EXTENSION_ACCESSORS(Encoder)
  // @@protoc_insertion_point(class_scope:protobrain.Encoder)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::ExtensionSet _extensions_;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > shape_;
  int type_;
  friend struct ::TableStruct_encoder_2eproto;
};
// -------------------------------------------------------------------

class SimpleEncoder :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobrain.SimpleEncoder) */ {
 public:
  SimpleEncoder();
  virtual ~SimpleEncoder();

  SimpleEncoder(const SimpleEncoder& from);

  inline SimpleEncoder& operator=(const SimpleEncoder& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SimpleEncoder(SimpleEncoder&& from) noexcept
    : SimpleEncoder() {
    *this = ::std::move(from);
  }

  inline SimpleEncoder& operator=(SimpleEncoder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SimpleEncoder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SimpleEncoder* internal_default_instance() {
    return reinterpret_cast<const SimpleEncoder*>(
               &_SimpleEncoder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SimpleEncoder* other);
  friend void swap(SimpleEncoder& a, SimpleEncoder& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SimpleEncoder* New() const final {
    return CreateMaybeMessage<SimpleEncoder>(nullptr);
  }

  SimpleEncoder* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SimpleEncoder>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SimpleEncoder& from);
  void MergeFrom(const SimpleEncoder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SimpleEncoder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float min_value = 1;
  bool has_min_value() const;
  void clear_min_value();
  static const int kMinValueFieldNumber = 1;
  float min_value() const;
  void set_min_value(float value);

  // optional float max_value = 2 [default = 10];
  bool has_max_value() const;
  void clear_max_value();
  static const int kMaxValueFieldNumber = 2;
  float max_value() const;
  void set_max_value(float value);

  static const int kSimpleEncoderFieldNumber = 100;
  static ::google::protobuf::internal::ExtensionIdentifier< ::protobrain::Encoder,
      ::google::protobuf::internal::MessageTypeTraits< ::protobrain::SimpleEncoder >, 11, false >
    simple_encoder;
  // @@protoc_insertion_point(class_scope:protobrain.SimpleEncoder)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float min_value_;
  float max_value_;
  friend struct ::TableStruct_encoder_2eproto;
};
// -------------------------------------------------------------------

class CyclicEncoder :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobrain.CyclicEncoder) */ {
 public:
  CyclicEncoder();
  virtual ~CyclicEncoder();

  CyclicEncoder(const CyclicEncoder& from);

  inline CyclicEncoder& operator=(const CyclicEncoder& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CyclicEncoder(CyclicEncoder&& from) noexcept
    : CyclicEncoder() {
    *this = ::std::move(from);
  }

  inline CyclicEncoder& operator=(CyclicEncoder&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CyclicEncoder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CyclicEncoder* internal_default_instance() {
    return reinterpret_cast<const CyclicEncoder*>(
               &_CyclicEncoder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CyclicEncoder* other);
  friend void swap(CyclicEncoder& a, CyclicEncoder& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CyclicEncoder* New() const final {
    return CreateMaybeMessage<CyclicEncoder>(nullptr);
  }

  CyclicEncoder* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CyclicEncoder>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CyclicEncoder& from);
  void MergeFrom(const CyclicEncoder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CyclicEncoder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float min_value = 1;
  bool has_min_value() const;
  void clear_min_value();
  static const int kMinValueFieldNumber = 1;
  float min_value() const;
  void set_min_value(float value);

  // optional float max_value = 2 [default = 10];
  bool has_max_value() const;
  void clear_max_value();
  static const int kMaxValueFieldNumber = 2;
  float max_value() const;
  void set_max_value(float value);

  static const int kCyclicEncoderFieldNumber = 101;
  static ::google::protobuf::internal::ExtensionIdentifier< ::protobrain::Encoder,
      ::google::protobuf::internal::MessageTypeTraits< ::protobrain::CyclicEncoder >, 11, false >
    cyclic_encoder;
  // @@protoc_insertion_point(class_scope:protobrain.CyclicEncoder)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  float min_value_;
  float max_value_;
  friend struct ::TableStruct_encoder_2eproto;
};
// -------------------------------------------------------------------

class SensorValue :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobrain.SensorValue) */ {
 public:
  SensorValue();
  virtual ~SensorValue();

  SensorValue(const SensorValue& from);

  inline SensorValue& operator=(const SensorValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SensorValue(SensorValue&& from) noexcept
    : SensorValue() {
    *this = ::std::move(from);
  }

  inline SensorValue& operator=(SensorValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SensorValue& default_instance();

  enum ValueCase {
    kInt = 1,
    kFloat = 2,
    kText = 3,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorValue* internal_default_instance() {
    return reinterpret_cast<const SensorValue*>(
               &_SensorValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(SensorValue* other);
  friend void swap(SensorValue& a, SensorValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SensorValue* New() const final {
    return CreateMaybeMessage<SensorValue>(nullptr);
  }

  SensorValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SensorValue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SensorValue& from);
  void MergeFrom(const SensorValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 int = 1;
  bool has_int_() const;
  void clear_int_();
  static const int kIntFieldNumber = 1;
  ::google::protobuf::int32 int_() const;
  void set_int_(::google::protobuf::int32 value);

  // optional float float = 2;
  bool has_float_() const;
  void clear_float_();
  static const int kFloatFieldNumber = 2;
  float float_() const;
  void set_float_(float value);

  // optional string text = 3;
  bool has_text() const;
  void clear_text();
  static const int kTextFieldNumber = 3;
  const ::std::string& text() const;
  void set_text(const ::std::string& value);
  #if LANG_CXX11
  void set_text(::std::string&& value);
  #endif
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  ::std::string* mutable_text();
  ::std::string* release_text();
  void set_allocated_text(::std::string* text);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:protobrain.SensorValue)
 private:
  class HasBitSetters;
  void set_has_int_();
  void set_has_float_();
  void set_has_text();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  union ValueUnion {
    ValueUnion() {}
    ::google::protobuf::int32 int__;
    float float__;
    ::google::protobuf::internal::ArenaStringPtr text_;
  } value_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_encoder_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Encoder

// optional .protobrain.Encoder.EncoderType type = 1;
inline bool Encoder::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Encoder::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::protobrain::Encoder_EncoderType Encoder::type() const {
  // @@protoc_insertion_point(field_get:protobrain.Encoder.type)
  return static_cast< ::protobrain::Encoder_EncoderType >(type_);
}
inline void Encoder::set_type(::protobrain::Encoder_EncoderType value) {
  assert(::protobrain::Encoder_EncoderType_IsValid(value));
  _has_bits_[0] |= 0x00000001u;
  type_ = value;
  // @@protoc_insertion_point(field_set:protobrain.Encoder.type)
}

// repeated int32 shape = 2;
inline int Encoder::shape_size() const {
  return shape_.size();
}
inline void Encoder::clear_shape() {
  shape_.Clear();
}
inline ::google::protobuf::int32 Encoder::shape(int index) const {
  // @@protoc_insertion_point(field_get:protobrain.Encoder.shape)
  return shape_.Get(index);
}
inline void Encoder::set_shape(int index, ::google::protobuf::int32 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobrain.Encoder.shape)
}
inline void Encoder::add_shape(::google::protobuf::int32 value) {
  shape_.Add(value);
  // @@protoc_insertion_point(field_add:protobrain.Encoder.shape)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Encoder::shape() const {
  // @@protoc_insertion_point(field_list:protobrain.Encoder.shape)
  return shape_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Encoder::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:protobrain.Encoder.shape)
  return &shape_;
}

// -------------------------------------------------------------------

// SimpleEncoder

// optional float min_value = 1;
inline bool SimpleEncoder::has_min_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SimpleEncoder::clear_min_value() {
  min_value_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float SimpleEncoder::min_value() const {
  // @@protoc_insertion_point(field_get:protobrain.SimpleEncoder.min_value)
  return min_value_;
}
inline void SimpleEncoder::set_min_value(float value) {
  _has_bits_[0] |= 0x00000001u;
  min_value_ = value;
  // @@protoc_insertion_point(field_set:protobrain.SimpleEncoder.min_value)
}

// optional float max_value = 2 [default = 10];
inline bool SimpleEncoder::has_max_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SimpleEncoder::clear_max_value() {
  max_value_ = 10;
  _has_bits_[0] &= ~0x00000002u;
}
inline float SimpleEncoder::max_value() const {
  // @@protoc_insertion_point(field_get:protobrain.SimpleEncoder.max_value)
  return max_value_;
}
inline void SimpleEncoder::set_max_value(float value) {
  _has_bits_[0] |= 0x00000002u;
  max_value_ = value;
  // @@protoc_insertion_point(field_set:protobrain.SimpleEncoder.max_value)
}

// -------------------------------------------------------------------

// CyclicEncoder

// optional float min_value = 1;
inline bool CyclicEncoder::has_min_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CyclicEncoder::clear_min_value() {
  min_value_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline float CyclicEncoder::min_value() const {
  // @@protoc_insertion_point(field_get:protobrain.CyclicEncoder.min_value)
  return min_value_;
}
inline void CyclicEncoder::set_min_value(float value) {
  _has_bits_[0] |= 0x00000001u;
  min_value_ = value;
  // @@protoc_insertion_point(field_set:protobrain.CyclicEncoder.min_value)
}

// optional float max_value = 2 [default = 10];
inline bool CyclicEncoder::has_max_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CyclicEncoder::clear_max_value() {
  max_value_ = 10;
  _has_bits_[0] &= ~0x00000002u;
}
inline float CyclicEncoder::max_value() const {
  // @@protoc_insertion_point(field_get:protobrain.CyclicEncoder.max_value)
  return max_value_;
}
inline void CyclicEncoder::set_max_value(float value) {
  _has_bits_[0] |= 0x00000002u;
  max_value_ = value;
  // @@protoc_insertion_point(field_set:protobrain.CyclicEncoder.max_value)
}

// -------------------------------------------------------------------

// SensorValue

// optional int32 int = 1;
inline bool SensorValue::has_int_() const {
  return value_case() == kInt;
}
inline void SensorValue::set_has_int_() {
  _oneof_case_[0] = kInt;
}
inline void SensorValue::clear_int_() {
  if (has_int_()) {
    value_.int__ = 0;
    clear_has_value();
  }
}
inline ::google::protobuf::int32 SensorValue::int_() const {
  // @@protoc_insertion_point(field_get:protobrain.SensorValue.int)
  if (has_int_()) {
    return value_.int__;
  }
  return 0;
}
inline void SensorValue::set_int_(::google::protobuf::int32 value) {
  if (!has_int_()) {
    clear_value();
    set_has_int_();
  }
  value_.int__ = value;
  // @@protoc_insertion_point(field_set:protobrain.SensorValue.int)
}

// optional float float = 2;
inline bool SensorValue::has_float_() const {
  return value_case() == kFloat;
}
inline void SensorValue::set_has_float_() {
  _oneof_case_[0] = kFloat;
}
inline void SensorValue::clear_float_() {
  if (has_float_()) {
    value_.float__ = 0;
    clear_has_value();
  }
}
inline float SensorValue::float_() const {
  // @@protoc_insertion_point(field_get:protobrain.SensorValue.float)
  if (has_float_()) {
    return value_.float__;
  }
  return 0;
}
inline void SensorValue::set_float_(float value) {
  if (!has_float_()) {
    clear_value();
    set_has_float_();
  }
  value_.float__ = value;
  // @@protoc_insertion_point(field_set:protobrain.SensorValue.float)
}

// optional string text = 3;
inline bool SensorValue::has_text() const {
  return value_case() == kText;
}
inline void SensorValue::set_has_text() {
  _oneof_case_[0] = kText;
}
inline void SensorValue::clear_text() {
  if (has_text()) {
    value_.text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const ::std::string& SensorValue::text() const {
  // @@protoc_insertion_point(field_get:protobrain.SensorValue.text)
  if (has_text()) {
    return value_.text_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void SensorValue::set_text(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:protobrain.SensorValue.text)
  if (!has_text()) {
    clear_value();
    set_has_text();
    value_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobrain.SensorValue.text)
}
#if LANG_CXX11
inline void SensorValue::set_text(::std::string&& value) {
  // @@protoc_insertion_point(field_set:protobrain.SensorValue.text)
  if (!has_text()) {
    clear_value();
    set_has_text();
    value_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:protobrain.SensorValue.text)
}
#endif
inline void SensorValue::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_text()) {
    clear_value();
    set_has_text();
    value_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobrain.SensorValue.text)
}
inline void SensorValue::set_text(const char* value, size_t size) {
  if (!has_text()) {
    clear_value();
    set_has_text();
    value_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.text_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobrain.SensorValue.text)
}
inline ::std::string* SensorValue::mutable_text() {
  if (!has_text()) {
    clear_value();
    set_has_text();
    value_.text_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:protobrain.SensorValue.text)
  return value_.text_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SensorValue::release_text() {
  // @@protoc_insertion_point(field_release:protobrain.SensorValue.text)
  if (has_text()) {
    clear_has_value();
    return value_.text_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void SensorValue::set_allocated_text(::std::string* text) {
  if (has_value()) {
    clear_value();
  }
  if (text != nullptr) {
    set_has_text();
    value_.text_.UnsafeSetDefault(text);
  }
  // @@protoc_insertion_point(field_set_allocated:protobrain.SensorValue.text)
}

inline bool SensorValue::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void SensorValue::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline SensorValue::ValueCase SensorValue::value_case() const {
  return SensorValue::ValueCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobrain

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::protobrain::Encoder_EncoderType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protobrain::Encoder_EncoderType>() {
  return ::protobrain::Encoder_EncoderType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_encoder_2eproto
