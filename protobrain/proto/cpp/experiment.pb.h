// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: experiment.proto

#ifndef PROTOBUF_INCLUDED_experiment_2eproto
#define PROTOBUF_INCLUDED_experiment_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "encoder.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_experiment_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_experiment_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_experiment_2eproto();
namespace protobrain {
class Cortex;
class CortexDefaultTypeInternal;
extern CortexDefaultTypeInternal _Cortex_default_instance_;
class Experiment;
class ExperimentDefaultTypeInternal;
extern ExperimentDefaultTypeInternal _Experiment_default_instance_;
}  // namespace protobrain
namespace google {
namespace protobuf {
template<> ::protobrain::Cortex* Arena::CreateMaybeMessage<::protobrain::Cortex>(Arena*);
template<> ::protobrain::Experiment* Arena::CreateMaybeMessage<::protobrain::Experiment>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace protobrain {

// ===================================================================

class Experiment :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobrain.Experiment) */ {
 public:
  Experiment();
  virtual ~Experiment();

  Experiment(const Experiment& from);

  inline Experiment& operator=(const Experiment& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Experiment(Experiment&& from) noexcept
    : Experiment() {
    *this = ::std::move(from);
  }

  inline Experiment& operator=(Experiment&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Experiment& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Experiment* internal_default_instance() {
    return reinterpret_cast<const Experiment*>(
               &_Experiment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Experiment* other);
  friend void swap(Experiment& a, Experiment& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Experiment* New() const final {
    return CreateMaybeMessage<Experiment>(nullptr);
  }

  Experiment* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Experiment>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Experiment& from);
  void MergeFrom(const Experiment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Experiment* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protobrain.SensorValue input = 3;
  int input_size() const;
  void clear_input();
  static const int kInputFieldNumber = 3;
  ::protobrain::SensorValue* mutable_input(int index);
  ::google::protobuf::RepeatedPtrField< ::protobrain::SensorValue >*
      mutable_input();
  const ::protobrain::SensorValue& input(int index) const;
  ::protobrain::SensorValue* add_input();
  const ::google::protobuf::RepeatedPtrField< ::protobrain::SensorValue >&
      input() const;

  // optional .protobrain.Encoder encoder = 1;
  bool has_encoder() const;
  void clear_encoder();
  static const int kEncoderFieldNumber = 1;
  const ::protobrain::Encoder& encoder() const;
  ::protobrain::Encoder* release_encoder();
  ::protobrain::Encoder* mutable_encoder();
  void set_allocated_encoder(::protobrain::Encoder* encoder);

  // optional .protobrain.Cortex cortex = 2;
  bool has_cortex() const;
  void clear_cortex();
  static const int kCortexFieldNumber = 2;
  const ::protobrain::Cortex& cortex() const;
  ::protobrain::Cortex* release_cortex();
  ::protobrain::Cortex* mutable_cortex();
  void set_allocated_cortex(::protobrain::Cortex* cortex);

  // @@protoc_insertion_point(class_scope:protobrain.Experiment)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::protobrain::SensorValue > input_;
  ::protobrain::Encoder* encoder_;
  ::protobrain::Cortex* cortex_;
  friend struct ::TableStruct_experiment_2eproto;
};
// -------------------------------------------------------------------

class Cortex :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobrain.Cortex) */ {
 public:
  Cortex();
  virtual ~Cortex();

  Cortex(const Cortex& from);

  inline Cortex& operator=(const Cortex& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Cortex(Cortex&& from) noexcept
    : Cortex() {
    *this = ::std::move(from);
  }

  inline Cortex& operator=(Cortex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Cortex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cortex* internal_default_instance() {
    return reinterpret_cast<const Cortex*>(
               &_Cortex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Cortex* other);
  friend void swap(Cortex& a, Cortex& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Cortex* New() const final {
    return CreateMaybeMessage<Cortex>(nullptr);
  }

  Cortex* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Cortex>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Cortex& from);
  void MergeFrom(const Cortex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cortex* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 layer = 1;
  int layer_size() const;
  void clear_layer();
  static const int kLayerFieldNumber = 1;
  ::google::protobuf::int32 layer(int index) const;
  void set_layer(int index, ::google::protobuf::int32 value);
  void add_layer(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      layer() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_layer();

  // @@protoc_insertion_point(class_scope:protobrain.Cortex)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > layer_;
  friend struct ::TableStruct_experiment_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Experiment

// optional .protobrain.Encoder encoder = 1;
inline bool Experiment::has_encoder() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::protobrain::Encoder& Experiment::encoder() const {
  const ::protobrain::Encoder* p = encoder_;
  // @@protoc_insertion_point(field_get:protobrain.Experiment.encoder)
  return p != nullptr ? *p : *reinterpret_cast<const ::protobrain::Encoder*>(
      &::protobrain::_Encoder_default_instance_);
}
inline ::protobrain::Encoder* Experiment::release_encoder() {
  // @@protoc_insertion_point(field_release:protobrain.Experiment.encoder)
  _has_bits_[0] &= ~0x00000001u;
  ::protobrain::Encoder* temp = encoder_;
  encoder_ = nullptr;
  return temp;
}
inline ::protobrain::Encoder* Experiment::mutable_encoder() {
  _has_bits_[0] |= 0x00000001u;
  if (encoder_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobrain::Encoder>(GetArenaNoVirtual());
    encoder_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobrain.Experiment.encoder)
  return encoder_;
}
inline void Experiment::set_allocated_encoder(::protobrain::Encoder* encoder) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(encoder_);
  }
  if (encoder) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      encoder = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, encoder, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  encoder_ = encoder;
  // @@protoc_insertion_point(field_set_allocated:protobrain.Experiment.encoder)
}

// optional .protobrain.Cortex cortex = 2;
inline bool Experiment::has_cortex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Experiment::clear_cortex() {
  if (cortex_ != nullptr) cortex_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::protobrain::Cortex& Experiment::cortex() const {
  const ::protobrain::Cortex* p = cortex_;
  // @@protoc_insertion_point(field_get:protobrain.Experiment.cortex)
  return p != nullptr ? *p : *reinterpret_cast<const ::protobrain::Cortex*>(
      &::protobrain::_Cortex_default_instance_);
}
inline ::protobrain::Cortex* Experiment::release_cortex() {
  // @@protoc_insertion_point(field_release:protobrain.Experiment.cortex)
  _has_bits_[0] &= ~0x00000002u;
  ::protobrain::Cortex* temp = cortex_;
  cortex_ = nullptr;
  return temp;
}
inline ::protobrain::Cortex* Experiment::mutable_cortex() {
  _has_bits_[0] |= 0x00000002u;
  if (cortex_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobrain::Cortex>(GetArenaNoVirtual());
    cortex_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobrain.Experiment.cortex)
  return cortex_;
}
inline void Experiment::set_allocated_cortex(::protobrain::Cortex* cortex) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cortex_;
  }
  if (cortex) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cortex = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cortex, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  cortex_ = cortex;
  // @@protoc_insertion_point(field_set_allocated:protobrain.Experiment.cortex)
}

// repeated .protobrain.SensorValue input = 3;
inline int Experiment::input_size() const {
  return input_.size();
}
inline ::protobrain::SensorValue* Experiment::mutable_input(int index) {
  // @@protoc_insertion_point(field_mutable:protobrain.Experiment.input)
  return input_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::protobrain::SensorValue >*
Experiment::mutable_input() {
  // @@protoc_insertion_point(field_mutable_list:protobrain.Experiment.input)
  return &input_;
}
inline const ::protobrain::SensorValue& Experiment::input(int index) const {
  // @@protoc_insertion_point(field_get:protobrain.Experiment.input)
  return input_.Get(index);
}
inline ::protobrain::SensorValue* Experiment::add_input() {
  // @@protoc_insertion_point(field_add:protobrain.Experiment.input)
  return input_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobrain::SensorValue >&
Experiment::input() const {
  // @@protoc_insertion_point(field_list:protobrain.Experiment.input)
  return input_;
}

// -------------------------------------------------------------------

// Cortex

// repeated int32 layer = 1;
inline int Cortex::layer_size() const {
  return layer_.size();
}
inline void Cortex::clear_layer() {
  layer_.Clear();
}
inline ::google::protobuf::int32 Cortex::layer(int index) const {
  // @@protoc_insertion_point(field_get:protobrain.Cortex.layer)
  return layer_.Get(index);
}
inline void Cortex::set_layer(int index, ::google::protobuf::int32 value) {
  layer_.Set(index, value);
  // @@protoc_insertion_point(field_set:protobrain.Cortex.layer)
}
inline void Cortex::add_layer(::google::protobuf::int32 value) {
  layer_.Add(value);
  // @@protoc_insertion_point(field_add:protobrain.Cortex.layer)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Cortex::layer() const {
  // @@protoc_insertion_point(field_list:protobrain.Cortex.layer)
  return layer_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Cortex::mutable_layer() {
  // @@protoc_insertion_point(field_mutable_list:protobrain.Cortex.layer)
  return &layer_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobrain

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_experiment_2eproto
