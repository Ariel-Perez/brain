// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snapshot.proto

#ifndef PROTOBUF_INCLUDED_snapshot_2eproto
#define PROTOBUF_INCLUDED_snapshot_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "encoder.pb.h"
#include "sdr.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_snapshot_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_snapshot_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_snapshot_2eproto();
namespace protobrain {
class CorticalSnapshot;
class CorticalSnapshotDefaultTypeInternal;
extern CorticalSnapshotDefaultTypeInternal _CorticalSnapshot_default_instance_;
class History;
class HistoryDefaultTypeInternal;
extern HistoryDefaultTypeInternal _History_default_instance_;
class SensorSnapshot;
class SensorSnapshotDefaultTypeInternal;
extern SensorSnapshotDefaultTypeInternal _SensorSnapshot_default_instance_;
class Snapshot;
class SnapshotDefaultTypeInternal;
extern SnapshotDefaultTypeInternal _Snapshot_default_instance_;
}  // namespace protobrain
namespace google {
namespace protobuf {
template<> ::protobrain::CorticalSnapshot* Arena::CreateMaybeMessage<::protobrain::CorticalSnapshot>(Arena*);
template<> ::protobrain::History* Arena::CreateMaybeMessage<::protobrain::History>(Arena*);
template<> ::protobrain::SensorSnapshot* Arena::CreateMaybeMessage<::protobrain::SensorSnapshot>(Arena*);
template<> ::protobrain::Snapshot* Arena::CreateMaybeMessage<::protobrain::Snapshot>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace protobrain {

// ===================================================================

class History :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobrain.History) */ {
 public:
  History();
  virtual ~History();

  History(const History& from);

  inline History& operator=(const History& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  History(History&& from) noexcept
    : History() {
    *this = ::std::move(from);
  }

  inline History& operator=(History&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const History& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const History* internal_default_instance() {
    return reinterpret_cast<const History*>(
               &_History_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(History* other);
  friend void swap(History& a, History& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline History* New() const final {
    return CreateMaybeMessage<History>(nullptr);
  }

  History* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<History>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const History& from);
  void MergeFrom(const History& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(History* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protobrain.Snapshot snapshot = 1;
  int snapshot_size() const;
  void clear_snapshot();
  static const int kSnapshotFieldNumber = 1;
  ::protobrain::Snapshot* mutable_snapshot(int index);
  ::google::protobuf::RepeatedPtrField< ::protobrain::Snapshot >*
      mutable_snapshot();
  const ::protobrain::Snapshot& snapshot(int index) const;
  ::protobrain::Snapshot* add_snapshot();
  const ::google::protobuf::RepeatedPtrField< ::protobrain::Snapshot >&
      snapshot() const;

  // @@protoc_insertion_point(class_scope:protobrain.History)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::protobrain::Snapshot > snapshot_;
  friend struct ::TableStruct_snapshot_2eproto;
};
// -------------------------------------------------------------------

class Snapshot :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobrain.Snapshot) */ {
 public:
  Snapshot();
  virtual ~Snapshot();

  Snapshot(const Snapshot& from);

  inline Snapshot& operator=(const Snapshot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Snapshot(Snapshot&& from) noexcept
    : Snapshot() {
    *this = ::std::move(from);
  }

  inline Snapshot& operator=(Snapshot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Snapshot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Snapshot* internal_default_instance() {
    return reinterpret_cast<const Snapshot*>(
               &_Snapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Snapshot* other);
  friend void swap(Snapshot& a, Snapshot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Snapshot* New() const final {
    return CreateMaybeMessage<Snapshot>(nullptr);
  }

  Snapshot* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Snapshot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Snapshot& from);
  void MergeFrom(const Snapshot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Snapshot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .protobrain.CorticalSnapshot cortex = 1;
  bool has_cortex() const;
  void clear_cortex();
  static const int kCortexFieldNumber = 1;
  const ::protobrain::CorticalSnapshot& cortex() const;
  ::protobrain::CorticalSnapshot* release_cortex();
  ::protobrain::CorticalSnapshot* mutable_cortex();
  void set_allocated_cortex(::protobrain::CorticalSnapshot* cortex);

  // optional .protobrain.SensorSnapshot sensor = 2;
  bool has_sensor() const;
  void clear_sensor();
  static const int kSensorFieldNumber = 2;
  const ::protobrain::SensorSnapshot& sensor() const;
  ::protobrain::SensorSnapshot* release_sensor();
  ::protobrain::SensorSnapshot* mutable_sensor();
  void set_allocated_sensor(::protobrain::SensorSnapshot* sensor);

  // @@protoc_insertion_point(class_scope:protobrain.Snapshot)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::protobrain::CorticalSnapshot* cortex_;
  ::protobrain::SensorSnapshot* sensor_;
  friend struct ::TableStruct_snapshot_2eproto;
};
// -------------------------------------------------------------------

class CorticalSnapshot :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobrain.CorticalSnapshot) */ {
 public:
  CorticalSnapshot();
  virtual ~CorticalSnapshot();

  CorticalSnapshot(const CorticalSnapshot& from);

  inline CorticalSnapshot& operator=(const CorticalSnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CorticalSnapshot(CorticalSnapshot&& from) noexcept
    : CorticalSnapshot() {
    *this = ::std::move(from);
  }

  inline CorticalSnapshot& operator=(CorticalSnapshot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CorticalSnapshot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CorticalSnapshot* internal_default_instance() {
    return reinterpret_cast<const CorticalSnapshot*>(
               &_CorticalSnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CorticalSnapshot* other);
  friend void swap(CorticalSnapshot& a, CorticalSnapshot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CorticalSnapshot* New() const final {
    return CreateMaybeMessage<CorticalSnapshot>(nullptr);
  }

  CorticalSnapshot* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CorticalSnapshot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CorticalSnapshot& from);
  void MergeFrom(const CorticalSnapshot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CorticalSnapshot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .protobrain.SparseDistributedRepresentation sdr = 1;
  int sdr_size() const;
  void clear_sdr();
  static const int kSdrFieldNumber = 1;
  ::protobrain::SparseDistributedRepresentation* mutable_sdr(int index);
  ::google::protobuf::RepeatedPtrField< ::protobrain::SparseDistributedRepresentation >*
      mutable_sdr();
  const ::protobrain::SparseDistributedRepresentation& sdr(int index) const;
  ::protobrain::SparseDistributedRepresentation* add_sdr();
  const ::google::protobuf::RepeatedPtrField< ::protobrain::SparseDistributedRepresentation >&
      sdr() const;

  // @@protoc_insertion_point(class_scope:protobrain.CorticalSnapshot)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::protobrain::SparseDistributedRepresentation > sdr_;
  friend struct ::TableStruct_snapshot_2eproto;
};
// -------------------------------------------------------------------

class SensorSnapshot :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:protobrain.SensorSnapshot) */ {
 public:
  SensorSnapshot();
  virtual ~SensorSnapshot();

  SensorSnapshot(const SensorSnapshot& from);

  inline SensorSnapshot& operator=(const SensorSnapshot& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SensorSnapshot(SensorSnapshot&& from) noexcept
    : SensorSnapshot() {
    *this = ::std::move(from);
  }

  inline SensorSnapshot& operator=(SensorSnapshot&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SensorSnapshot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SensorSnapshot* internal_default_instance() {
    return reinterpret_cast<const SensorSnapshot*>(
               &_SensorSnapshot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(SensorSnapshot* other);
  friend void swap(SensorSnapshot& a, SensorSnapshot& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SensorSnapshot* New() const final {
    return CreateMaybeMessage<SensorSnapshot>(nullptr);
  }

  SensorSnapshot* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SensorSnapshot>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SensorSnapshot& from);
  void MergeFrom(const SensorSnapshot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SensorSnapshot* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .protobrain.SensorValue value = 1;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 1;
  const ::protobrain::SensorValue& value() const;
  ::protobrain::SensorValue* release_value();
  ::protobrain::SensorValue* mutable_value();
  void set_allocated_value(::protobrain::SensorValue* value);

  // optional .protobrain.SparseDistributedRepresentation sdr = 2;
  bool has_sdr() const;
  void clear_sdr();
  static const int kSdrFieldNumber = 2;
  const ::protobrain::SparseDistributedRepresentation& sdr() const;
  ::protobrain::SparseDistributedRepresentation* release_sdr();
  ::protobrain::SparseDistributedRepresentation* mutable_sdr();
  void set_allocated_sdr(::protobrain::SparseDistributedRepresentation* sdr);

  // @@protoc_insertion_point(class_scope:protobrain.SensorSnapshot)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::protobrain::SensorValue* value_;
  ::protobrain::SparseDistributedRepresentation* sdr_;
  friend struct ::TableStruct_snapshot_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// History

// repeated .protobrain.Snapshot snapshot = 1;
inline int History::snapshot_size() const {
  return snapshot_.size();
}
inline void History::clear_snapshot() {
  snapshot_.Clear();
}
inline ::protobrain::Snapshot* History::mutable_snapshot(int index) {
  // @@protoc_insertion_point(field_mutable:protobrain.History.snapshot)
  return snapshot_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::protobrain::Snapshot >*
History::mutable_snapshot() {
  // @@protoc_insertion_point(field_mutable_list:protobrain.History.snapshot)
  return &snapshot_;
}
inline const ::protobrain::Snapshot& History::snapshot(int index) const {
  // @@protoc_insertion_point(field_get:protobrain.History.snapshot)
  return snapshot_.Get(index);
}
inline ::protobrain::Snapshot* History::add_snapshot() {
  // @@protoc_insertion_point(field_add:protobrain.History.snapshot)
  return snapshot_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobrain::Snapshot >&
History::snapshot() const {
  // @@protoc_insertion_point(field_list:protobrain.History.snapshot)
  return snapshot_;
}

// -------------------------------------------------------------------

// Snapshot

// optional .protobrain.CorticalSnapshot cortex = 1;
inline bool Snapshot::has_cortex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Snapshot::clear_cortex() {
  if (cortex_ != nullptr) cortex_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::protobrain::CorticalSnapshot& Snapshot::cortex() const {
  const ::protobrain::CorticalSnapshot* p = cortex_;
  // @@protoc_insertion_point(field_get:protobrain.Snapshot.cortex)
  return p != nullptr ? *p : *reinterpret_cast<const ::protobrain::CorticalSnapshot*>(
      &::protobrain::_CorticalSnapshot_default_instance_);
}
inline ::protobrain::CorticalSnapshot* Snapshot::release_cortex() {
  // @@protoc_insertion_point(field_release:protobrain.Snapshot.cortex)
  _has_bits_[0] &= ~0x00000001u;
  ::protobrain::CorticalSnapshot* temp = cortex_;
  cortex_ = nullptr;
  return temp;
}
inline ::protobrain::CorticalSnapshot* Snapshot::mutable_cortex() {
  _has_bits_[0] |= 0x00000001u;
  if (cortex_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobrain::CorticalSnapshot>(GetArenaNoVirtual());
    cortex_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobrain.Snapshot.cortex)
  return cortex_;
}
inline void Snapshot::set_allocated_cortex(::protobrain::CorticalSnapshot* cortex) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cortex_;
  }
  if (cortex) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cortex = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cortex, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  cortex_ = cortex;
  // @@protoc_insertion_point(field_set_allocated:protobrain.Snapshot.cortex)
}

// optional .protobrain.SensorSnapshot sensor = 2;
inline bool Snapshot::has_sensor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Snapshot::clear_sensor() {
  if (sensor_ != nullptr) sensor_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::protobrain::SensorSnapshot& Snapshot::sensor() const {
  const ::protobrain::SensorSnapshot* p = sensor_;
  // @@protoc_insertion_point(field_get:protobrain.Snapshot.sensor)
  return p != nullptr ? *p : *reinterpret_cast<const ::protobrain::SensorSnapshot*>(
      &::protobrain::_SensorSnapshot_default_instance_);
}
inline ::protobrain::SensorSnapshot* Snapshot::release_sensor() {
  // @@protoc_insertion_point(field_release:protobrain.Snapshot.sensor)
  _has_bits_[0] &= ~0x00000002u;
  ::protobrain::SensorSnapshot* temp = sensor_;
  sensor_ = nullptr;
  return temp;
}
inline ::protobrain::SensorSnapshot* Snapshot::mutable_sensor() {
  _has_bits_[0] |= 0x00000002u;
  if (sensor_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobrain::SensorSnapshot>(GetArenaNoVirtual());
    sensor_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobrain.Snapshot.sensor)
  return sensor_;
}
inline void Snapshot::set_allocated_sensor(::protobrain::SensorSnapshot* sensor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sensor_;
  }
  if (sensor) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sensor = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sensor, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sensor_ = sensor;
  // @@protoc_insertion_point(field_set_allocated:protobrain.Snapshot.sensor)
}

// -------------------------------------------------------------------

// CorticalSnapshot

// repeated .protobrain.SparseDistributedRepresentation sdr = 1;
inline int CorticalSnapshot::sdr_size() const {
  return sdr_.size();
}
inline ::protobrain::SparseDistributedRepresentation* CorticalSnapshot::mutable_sdr(int index) {
  // @@protoc_insertion_point(field_mutable:protobrain.CorticalSnapshot.sdr)
  return sdr_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::protobrain::SparseDistributedRepresentation >*
CorticalSnapshot::mutable_sdr() {
  // @@protoc_insertion_point(field_mutable_list:protobrain.CorticalSnapshot.sdr)
  return &sdr_;
}
inline const ::protobrain::SparseDistributedRepresentation& CorticalSnapshot::sdr(int index) const {
  // @@protoc_insertion_point(field_get:protobrain.CorticalSnapshot.sdr)
  return sdr_.Get(index);
}
inline ::protobrain::SparseDistributedRepresentation* CorticalSnapshot::add_sdr() {
  // @@protoc_insertion_point(field_add:protobrain.CorticalSnapshot.sdr)
  return sdr_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::protobrain::SparseDistributedRepresentation >&
CorticalSnapshot::sdr() const {
  // @@protoc_insertion_point(field_list:protobrain.CorticalSnapshot.sdr)
  return sdr_;
}

// -------------------------------------------------------------------

// SensorSnapshot

// optional .protobrain.SensorValue value = 1;
inline bool SensorSnapshot::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::protobrain::SensorValue& SensorSnapshot::value() const {
  const ::protobrain::SensorValue* p = value_;
  // @@protoc_insertion_point(field_get:protobrain.SensorSnapshot.value)
  return p != nullptr ? *p : *reinterpret_cast<const ::protobrain::SensorValue*>(
      &::protobrain::_SensorValue_default_instance_);
}
inline ::protobrain::SensorValue* SensorSnapshot::release_value() {
  // @@protoc_insertion_point(field_release:protobrain.SensorSnapshot.value)
  _has_bits_[0] &= ~0x00000001u;
  ::protobrain::SensorValue* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::protobrain::SensorValue* SensorSnapshot::mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobrain::SensorValue>(GetArenaNoVirtual());
    value_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobrain.SensorSnapshot.value)
  return value_;
}
inline void SensorSnapshot::set_allocated_value(::protobrain::SensorValue* value) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(value_);
  }
  if (value) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:protobrain.SensorSnapshot.value)
}

// optional .protobrain.SparseDistributedRepresentation sdr = 2;
inline bool SensorSnapshot::has_sdr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline const ::protobrain::SparseDistributedRepresentation& SensorSnapshot::sdr() const {
  const ::protobrain::SparseDistributedRepresentation* p = sdr_;
  // @@protoc_insertion_point(field_get:protobrain.SensorSnapshot.sdr)
  return p != nullptr ? *p : *reinterpret_cast<const ::protobrain::SparseDistributedRepresentation*>(
      &::protobrain::_SparseDistributedRepresentation_default_instance_);
}
inline ::protobrain::SparseDistributedRepresentation* SensorSnapshot::release_sdr() {
  // @@protoc_insertion_point(field_release:protobrain.SensorSnapshot.sdr)
  _has_bits_[0] &= ~0x00000002u;
  ::protobrain::SparseDistributedRepresentation* temp = sdr_;
  sdr_ = nullptr;
  return temp;
}
inline ::protobrain::SparseDistributedRepresentation* SensorSnapshot::mutable_sdr() {
  _has_bits_[0] |= 0x00000002u;
  if (sdr_ == nullptr) {
    auto* p = CreateMaybeMessage<::protobrain::SparseDistributedRepresentation>(GetArenaNoVirtual());
    sdr_ = p;
  }
  // @@protoc_insertion_point(field_mutable:protobrain.SensorSnapshot.sdr)
  return sdr_;
}
inline void SensorSnapshot::set_allocated_sdr(::protobrain::SparseDistributedRepresentation* sdr) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(sdr_);
  }
  if (sdr) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sdr = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sdr, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  sdr_ = sdr;
  // @@protoc_insertion_point(field_set_allocated:protobrain.SensorSnapshot.sdr)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobrain

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_snapshot_2eproto
