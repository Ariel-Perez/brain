// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: experiment.proto

#include "experiment.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_encoder_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Encoder_encoder_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_encoder_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SensorValue_encoder_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_experiment_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Cortex_experiment_2eproto;
namespace protobrain {
class ExperimentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Experiment> _instance;
} _Experiment_default_instance_;
class CortexDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Cortex> _instance;
} _Cortex_default_instance_;
}  // namespace protobrain
static void InitDefaultsExperiment_experiment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobrain::_Experiment_default_instance_;
    new (ptr) ::protobrain::Experiment();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobrain::Experiment::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_Experiment_experiment_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsExperiment_experiment_2eproto}, {
      &scc_info_Encoder_encoder_2eproto.base,
      &scc_info_Cortex_experiment_2eproto.base,
      &scc_info_SensorValue_encoder_2eproto.base,}};

static void InitDefaultsCortex_experiment_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobrain::_Cortex_default_instance_;
    new (ptr) ::protobrain::Cortex();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobrain::Cortex::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Cortex_experiment_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCortex_experiment_2eproto}, {}};

void InitDefaults_experiment_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Experiment_experiment_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Cortex_experiment_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_experiment_2eproto[2];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_experiment_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_experiment_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_experiment_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protobrain::Experiment, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobrain::Experiment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobrain::Experiment, encoder_),
  PROTOBUF_FIELD_OFFSET(::protobrain::Experiment, cortex_),
  PROTOBUF_FIELD_OFFSET(::protobrain::Experiment, input_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protobrain::Cortex, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobrain::Cortex, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobrain::Cortex, layer_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::protobrain::Experiment)},
  { 11, 17, sizeof(::protobrain::Cortex)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::protobrain::_Experiment_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protobrain::_Cortex_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_experiment_2eproto = {
  {}, AddDescriptors_experiment_2eproto, "experiment.proto", schemas,
  file_default_instances, TableStruct_experiment_2eproto::offsets,
  file_level_metadata_experiment_2eproto, 2, file_level_enum_descriptors_experiment_2eproto, file_level_service_descriptors_experiment_2eproto,
};

const char descriptor_table_protodef_experiment_2eproto[] =
  "\n\020experiment.proto\022\nprotobrain\032\rencoder."
  "proto\"~\n\nExperiment\022$\n\007encoder\030\001 \001(\0132\023.p"
  "rotobrain.Encoder\022\"\n\006cortex\030\002 \001(\0132\022.prot"
  "obrain.Cortex\022&\n\005input\030\003 \003(\0132\027.protobrai"
  "n.SensorValue\"\027\n\006Cortex\022\r\n\005layer\030\001 \003(\005"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_experiment_2eproto = {
  false, InitDefaults_experiment_2eproto, 
  descriptor_table_protodef_experiment_2eproto,
  "experiment.proto", &assign_descriptors_table_experiment_2eproto, 198,
};

void AddDescriptors_experiment_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_encoder_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_experiment_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_experiment_2eproto = []() { AddDescriptors_experiment_2eproto(); return true; }();
namespace protobrain {

// ===================================================================

void Experiment::InitAsDefaultInstance() {
  ::protobrain::_Experiment_default_instance_._instance.get_mutable()->encoder_ = const_cast< ::protobrain::Encoder*>(
      ::protobrain::Encoder::internal_default_instance());
  ::protobrain::_Experiment_default_instance_._instance.get_mutable()->cortex_ = const_cast< ::protobrain::Cortex*>(
      ::protobrain::Cortex::internal_default_instance());
}
class Experiment::HasBitSetters {
 public:
  static const ::protobrain::Encoder& encoder(const Experiment* msg);
  static void set_has_encoder(Experiment* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::protobrain::Cortex& cortex(const Experiment* msg);
  static void set_has_cortex(Experiment* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::protobrain::Encoder&
Experiment::HasBitSetters::encoder(const Experiment* msg) {
  return *msg->encoder_;
}
const ::protobrain::Cortex&
Experiment::HasBitSetters::cortex(const Experiment* msg) {
  return *msg->cortex_;
}
void Experiment::clear_encoder() {
  if (encoder_ != nullptr) encoder_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void Experiment::clear_input() {
  input_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Experiment::kEncoderFieldNumber;
const int Experiment::kCortexFieldNumber;
const int Experiment::kInputFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Experiment::Experiment()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobrain.Experiment)
}
Experiment::Experiment(const Experiment& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      input_(from.input_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_encoder()) {
    encoder_ = new ::protobrain::Encoder(*from.encoder_);
  } else {
    encoder_ = nullptr;
  }
  if (from.has_cortex()) {
    cortex_ = new ::protobrain::Cortex(*from.cortex_);
  } else {
    cortex_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobrain.Experiment)
}

void Experiment::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Experiment_experiment_2eproto.base);
  ::memset(&encoder_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cortex_) -
      reinterpret_cast<char*>(&encoder_)) + sizeof(cortex_));
}

Experiment::~Experiment() {
  // @@protoc_insertion_point(destructor:protobrain.Experiment)
  SharedDtor();
}

void Experiment::SharedDtor() {
  if (this != internal_default_instance()) delete encoder_;
  if (this != internal_default_instance()) delete cortex_;
}

void Experiment::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Experiment& Experiment::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Experiment_experiment_2eproto.base);
  return *internal_default_instance();
}


void Experiment::Clear() {
// @@protoc_insertion_point(message_clear_start:protobrain.Experiment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(encoder_ != nullptr);
      encoder_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cortex_ != nullptr);
      cortex_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Experiment::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Experiment*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .protobrain.Encoder encoder = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::protobrain::Encoder::_InternalParse;
        object = msg->mutable_encoder();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .protobrain.Cortex cortex = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::protobrain::Cortex::_InternalParse;
        object = msg->mutable_cortex();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // repeated .protobrain.SensorValue input = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::protobrain::SensorValue::_InternalParse;
          object = msg->add_input();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 26 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Experiment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobrain.Experiment)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protobrain.Encoder encoder = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_encoder()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protobrain.Cortex cortex = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cortex()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .protobrain.SensorValue input = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_input()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobrain.Experiment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobrain.Experiment)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Experiment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobrain.Experiment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobrain.Encoder encoder = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::encoder(this), output);
  }

  // optional .protobrain.Cortex cortex = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::cortex(this), output);
  }

  // repeated .protobrain.SensorValue input = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->input_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->input(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobrain.Experiment)
}

::google::protobuf::uint8* Experiment::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobrain.Experiment)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobrain.Encoder encoder = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::encoder(this), target);
  }

  // optional .protobrain.Cortex cortex = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::cortex(this), target);
  }

  // repeated .protobrain.SensorValue input = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->input_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->input(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobrain.Experiment)
  return target;
}

size_t Experiment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobrain.Experiment)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protobrain.SensorValue input = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->input_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->input(static_cast<int>(i)));
    }
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .protobrain.Encoder encoder = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *encoder_);
    }

    // optional .protobrain.Cortex cortex = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *cortex_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Experiment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobrain.Experiment)
  GOOGLE_DCHECK_NE(&from, this);
  const Experiment* source =
      ::google::protobuf::DynamicCastToGenerated<Experiment>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobrain.Experiment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobrain.Experiment)
    MergeFrom(*source);
  }
}

void Experiment::MergeFrom(const Experiment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobrain.Experiment)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_.MergeFrom(from.input_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_encoder()->::protobrain::Encoder::MergeFrom(from.encoder());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_cortex()->::protobrain::Cortex::MergeFrom(from.cortex());
    }
  }
}

void Experiment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobrain.Experiment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Experiment::CopyFrom(const Experiment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobrain.Experiment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Experiment::IsInitialized() const {
  if (has_encoder()) {
    if (!this->encoder_->IsInitialized()) return false;
  }
  return true;
}

void Experiment::Swap(Experiment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Experiment::InternalSwap(Experiment* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&input_)->InternalSwap(CastToBase(&other->input_));
  swap(encoder_, other->encoder_);
  swap(cortex_, other->cortex_);
}

::google::protobuf::Metadata Experiment::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_experiment_2eproto);
  return ::file_level_metadata_experiment_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Cortex::InitAsDefaultInstance() {
}
class Cortex::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Cortex::kLayerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Cortex::Cortex()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobrain.Cortex)
}
Cortex::Cortex(const Cortex& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      layer_(from.layer_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobrain.Cortex)
}

void Cortex::SharedCtor() {
}

Cortex::~Cortex() {
  // @@protoc_insertion_point(destructor:protobrain.Cortex)
  SharedDtor();
}

void Cortex::SharedDtor() {
}

void Cortex::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Cortex& Cortex::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Cortex_experiment_2eproto.base);
  return *internal_default_instance();
}


void Cortex::Clear() {
// @@protoc_insertion_point(message_clear_start:protobrain.Cortex)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  layer_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Cortex::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Cortex*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated int32 layer = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) == 8) {
          do {
            msg->add_layer(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 8 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
        object = msg->mutable_layer();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Cortex::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobrain.Cortex)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 layer = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8u, input, this->mutable_layer())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_layer())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobrain.Cortex)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobrain.Cortex)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Cortex::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobrain.Cortex)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 layer = 1;
  for (int i = 0, n = this->layer_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->layer(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobrain.Cortex)
}

::google::protobuf::uint8* Cortex::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobrain.Cortex)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 layer = 1;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(1, this->layer_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobrain.Cortex)
  return target;
}

size_t Cortex::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobrain.Cortex)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 layer = 1;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->layer_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->layer_size());
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Cortex::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobrain.Cortex)
  GOOGLE_DCHECK_NE(&from, this);
  const Cortex* source =
      ::google::protobuf::DynamicCastToGenerated<Cortex>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobrain.Cortex)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobrain.Cortex)
    MergeFrom(*source);
  }
}

void Cortex::MergeFrom(const Cortex& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobrain.Cortex)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  layer_.MergeFrom(from.layer_);
}

void Cortex::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobrain.Cortex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Cortex::CopyFrom(const Cortex& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobrain.Cortex)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cortex::IsInitialized() const {
  return true;
}

void Cortex::Swap(Cortex* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Cortex::InternalSwap(Cortex* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  layer_.InternalSwap(&other->layer_);
}

::google::protobuf::Metadata Cortex::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_experiment_2eproto);
  return ::file_level_metadata_experiment_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobrain
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::protobrain::Experiment* Arena::CreateMaybeMessage< ::protobrain::Experiment >(Arena* arena) {
  return Arena::CreateInternal< ::protobrain::Experiment >(arena);
}
template<> PROTOBUF_NOINLINE ::protobrain::Cortex* Arena::CreateMaybeMessage< ::protobrain::Cortex >(Arena* arena) {
  return Arena::CreateInternal< ::protobrain::Cortex >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
