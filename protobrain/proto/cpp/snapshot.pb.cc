// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: snapshot.proto

#include "snapshot.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_encoder_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SensorValue_encoder_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_sdr_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SparseDistributedRepresentation_sdr_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_snapshot_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_CorticalSnapshot_snapshot_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_snapshot_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_SensorSnapshot_snapshot_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_snapshot_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Snapshot_snapshot_2eproto;
namespace protobrain {
class HistoryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<History> _instance;
} _History_default_instance_;
class SnapshotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Snapshot> _instance;
} _Snapshot_default_instance_;
class CorticalSnapshotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CorticalSnapshot> _instance;
} _CorticalSnapshot_default_instance_;
class SensorSnapshotDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SensorSnapshot> _instance;
} _SensorSnapshot_default_instance_;
}  // namespace protobrain
static void InitDefaultsHistory_snapshot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobrain::_History_default_instance_;
    new (ptr) ::protobrain::History();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobrain::History::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_History_snapshot_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsHistory_snapshot_2eproto}, {
      &scc_info_Snapshot_snapshot_2eproto.base,}};

static void InitDefaultsSnapshot_snapshot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobrain::_Snapshot_default_instance_;
    new (ptr) ::protobrain::Snapshot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobrain::Snapshot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Snapshot_snapshot_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSnapshot_snapshot_2eproto}, {
      &scc_info_CorticalSnapshot_snapshot_2eproto.base,
      &scc_info_SensorSnapshot_snapshot_2eproto.base,}};

static void InitDefaultsCorticalSnapshot_snapshot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobrain::_CorticalSnapshot_default_instance_;
    new (ptr) ::protobrain::CorticalSnapshot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobrain::CorticalSnapshot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_CorticalSnapshot_snapshot_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsCorticalSnapshot_snapshot_2eproto}, {
      &scc_info_SparseDistributedRepresentation_sdr_2eproto.base,}};

static void InitDefaultsSensorSnapshot_snapshot_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobrain::_SensorSnapshot_default_instance_;
    new (ptr) ::protobrain::SensorSnapshot();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobrain::SensorSnapshot::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_SensorSnapshot_snapshot_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSensorSnapshot_snapshot_2eproto}, {
      &scc_info_SensorValue_encoder_2eproto.base,
      &scc_info_SparseDistributedRepresentation_sdr_2eproto.base,}};

void InitDefaults_snapshot_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_History_snapshot_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Snapshot_snapshot_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CorticalSnapshot_snapshot_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SensorSnapshot_snapshot_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_snapshot_2eproto[4];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_snapshot_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_snapshot_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_snapshot_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protobrain::History, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobrain::History, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobrain::History, snapshot_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protobrain::Snapshot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobrain::Snapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobrain::Snapshot, cortex_),
  PROTOBUF_FIELD_OFFSET(::protobrain::Snapshot, sensor_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobrain::CorticalSnapshot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobrain::CorticalSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobrain::CorticalSnapshot, sdr_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protobrain::SensorSnapshot, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobrain::SensorSnapshot, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobrain::SensorSnapshot, value_),
  PROTOBUF_FIELD_OFFSET(::protobrain::SensorSnapshot, sdr_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::protobrain::History)},
  { 7, 14, sizeof(::protobrain::Snapshot)},
  { 16, 22, sizeof(::protobrain::CorticalSnapshot)},
  { 23, 30, sizeof(::protobrain::SensorSnapshot)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::protobrain::_History_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protobrain::_Snapshot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protobrain::_CorticalSnapshot_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protobrain::_SensorSnapshot_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_snapshot_2eproto = {
  {}, AddDescriptors_snapshot_2eproto, "snapshot.proto", schemas,
  file_default_instances, TableStruct_snapshot_2eproto::offsets,
  file_level_metadata_snapshot_2eproto, 4, file_level_enum_descriptors_snapshot_2eproto, file_level_service_descriptors_snapshot_2eproto,
};

const char descriptor_table_protodef_snapshot_2eproto[] =
  "\n\016snapshot.proto\022\nprotobrain\032\rencoder.pr"
  "oto\032\tsdr.proto\"1\n\007History\022&\n\010snapshot\030\001 "
  "\003(\0132\024.protobrain.Snapshot\"d\n\010Snapshot\022,\n"
  "\006cortex\030\001 \001(\0132\034.protobrain.CorticalSnaps"
  "hot\022*\n\006sensor\030\002 \001(\0132\032.protobrain.SensorS"
  "napshot\"L\n\020CorticalSnapshot\0228\n\003sdr\030\001 \003(\013"
  "2+.protobrain.SparseDistributedRepresent"
  "ation\"r\n\016SensorSnapshot\022&\n\005value\030\001 \001(\0132\027"
  ".protobrain.SensorValue\0228\n\003sdr\030\002 \001(\0132+.p"
  "rotobrain.SparseDistributedRepresentatio"
  "n"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_snapshot_2eproto = {
  false, InitDefaults_snapshot_2eproto, 
  descriptor_table_protodef_snapshot_2eproto,
  "snapshot.proto", &assign_descriptors_table_snapshot_2eproto, 401,
};

void AddDescriptors_snapshot_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[2] =
  {
    ::AddDescriptors_encoder_2eproto,
    ::AddDescriptors_sdr_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_snapshot_2eproto, deps, 2);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_snapshot_2eproto = []() { AddDescriptors_snapshot_2eproto(); return true; }();
namespace protobrain {

// ===================================================================

void History::InitAsDefaultInstance() {
}
class History::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int History::kSnapshotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

History::History()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobrain.History)
}
History::History(const History& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      snapshot_(from.snapshot_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobrain.History)
}

void History::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_History_snapshot_2eproto.base);
}

History::~History() {
  // @@protoc_insertion_point(destructor:protobrain.History)
  SharedDtor();
}

void History::SharedDtor() {
}

void History::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const History& History::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_History_snapshot_2eproto.base);
  return *internal_default_instance();
}


void History::Clear() {
// @@protoc_insertion_point(message_clear_start:protobrain.History)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  snapshot_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* History::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<History*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .protobrain.Snapshot snapshot = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::protobrain::Snapshot::_InternalParse;
          object = msg->add_snapshot();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool History::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobrain.History)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobrain.Snapshot snapshot = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_snapshot()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobrain.History)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobrain.History)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void History::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobrain.History)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protobrain.Snapshot snapshot = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->snapshot_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->snapshot(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobrain.History)
}

::google::protobuf::uint8* History::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobrain.History)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protobrain.Snapshot snapshot = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->snapshot_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->snapshot(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobrain.History)
  return target;
}

size_t History::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobrain.History)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protobrain.Snapshot snapshot = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->snapshot_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->snapshot(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void History::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobrain.History)
  GOOGLE_DCHECK_NE(&from, this);
  const History* source =
      ::google::protobuf::DynamicCastToGenerated<History>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobrain.History)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobrain.History)
    MergeFrom(*source);
  }
}

void History::MergeFrom(const History& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobrain.History)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  snapshot_.MergeFrom(from.snapshot_);
}

void History::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobrain.History)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void History::CopyFrom(const History& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobrain.History)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool History::IsInitialized() const {
  return true;
}

void History::Swap(History* other) {
  if (other == this) return;
  InternalSwap(other);
}
void History::InternalSwap(History* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&snapshot_)->InternalSwap(CastToBase(&other->snapshot_));
}

::google::protobuf::Metadata History::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_snapshot_2eproto);
  return ::file_level_metadata_snapshot_2eproto[kIndexInFileMessages];
}


// ===================================================================

void Snapshot::InitAsDefaultInstance() {
  ::protobrain::_Snapshot_default_instance_._instance.get_mutable()->cortex_ = const_cast< ::protobrain::CorticalSnapshot*>(
      ::protobrain::CorticalSnapshot::internal_default_instance());
  ::protobrain::_Snapshot_default_instance_._instance.get_mutable()->sensor_ = const_cast< ::protobrain::SensorSnapshot*>(
      ::protobrain::SensorSnapshot::internal_default_instance());
}
class Snapshot::HasBitSetters {
 public:
  static const ::protobrain::CorticalSnapshot& cortex(const Snapshot* msg);
  static void set_has_cortex(Snapshot* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::protobrain::SensorSnapshot& sensor(const Snapshot* msg);
  static void set_has_sensor(Snapshot* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::protobrain::CorticalSnapshot&
Snapshot::HasBitSetters::cortex(const Snapshot* msg) {
  return *msg->cortex_;
}
const ::protobrain::SensorSnapshot&
Snapshot::HasBitSetters::sensor(const Snapshot* msg) {
  return *msg->sensor_;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Snapshot::kCortexFieldNumber;
const int Snapshot::kSensorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Snapshot::Snapshot()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobrain.Snapshot)
}
Snapshot::Snapshot(const Snapshot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_cortex()) {
    cortex_ = new ::protobrain::CorticalSnapshot(*from.cortex_);
  } else {
    cortex_ = nullptr;
  }
  if (from.has_sensor()) {
    sensor_ = new ::protobrain::SensorSnapshot(*from.sensor_);
  } else {
    sensor_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobrain.Snapshot)
}

void Snapshot::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_Snapshot_snapshot_2eproto.base);
  ::memset(&cortex_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sensor_) -
      reinterpret_cast<char*>(&cortex_)) + sizeof(sensor_));
}

Snapshot::~Snapshot() {
  // @@protoc_insertion_point(destructor:protobrain.Snapshot)
  SharedDtor();
}

void Snapshot::SharedDtor() {
  if (this != internal_default_instance()) delete cortex_;
  if (this != internal_default_instance()) delete sensor_;
}

void Snapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Snapshot& Snapshot::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Snapshot_snapshot_2eproto.base);
  return *internal_default_instance();
}


void Snapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:protobrain.Snapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(cortex_ != nullptr);
      cortex_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sensor_ != nullptr);
      sensor_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Snapshot::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Snapshot*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .protobrain.CorticalSnapshot cortex = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::protobrain::CorticalSnapshot::_InternalParse;
        object = msg->mutable_cortex();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .protobrain.SensorSnapshot sensor = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::protobrain::SensorSnapshot::_InternalParse;
        object = msg->mutable_sensor();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Snapshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobrain.Snapshot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protobrain.CorticalSnapshot cortex = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_cortex()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protobrain.SensorSnapshot sensor = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sensor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobrain.Snapshot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobrain.Snapshot)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Snapshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobrain.Snapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobrain.CorticalSnapshot cortex = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::cortex(this), output);
  }

  // optional .protobrain.SensorSnapshot sensor = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::sensor(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobrain.Snapshot)
}

::google::protobuf::uint8* Snapshot::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobrain.Snapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobrain.CorticalSnapshot cortex = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::cortex(this), target);
  }

  // optional .protobrain.SensorSnapshot sensor = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::sensor(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobrain.Snapshot)
  return target;
}

size_t Snapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobrain.Snapshot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .protobrain.CorticalSnapshot cortex = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *cortex_);
    }

    // optional .protobrain.SensorSnapshot sensor = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *sensor_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Snapshot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobrain.Snapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const Snapshot* source =
      ::google::protobuf::DynamicCastToGenerated<Snapshot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobrain.Snapshot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobrain.Snapshot)
    MergeFrom(*source);
  }
}

void Snapshot::MergeFrom(const Snapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobrain.Snapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_cortex()->::protobrain::CorticalSnapshot::MergeFrom(from.cortex());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_sensor()->::protobrain::SensorSnapshot::MergeFrom(from.sensor());
    }
  }
}

void Snapshot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobrain.Snapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Snapshot::CopyFrom(const Snapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobrain.Snapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Snapshot::IsInitialized() const {
  return true;
}

void Snapshot::Swap(Snapshot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Snapshot::InternalSwap(Snapshot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(cortex_, other->cortex_);
  swap(sensor_, other->sensor_);
}

::google::protobuf::Metadata Snapshot::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_snapshot_2eproto);
  return ::file_level_metadata_snapshot_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CorticalSnapshot::InitAsDefaultInstance() {
}
class CorticalSnapshot::HasBitSetters {
 public:
};

void CorticalSnapshot::clear_sdr() {
  sdr_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CorticalSnapshot::kSdrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CorticalSnapshot::CorticalSnapshot()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobrain.CorticalSnapshot)
}
CorticalSnapshot::CorticalSnapshot(const CorticalSnapshot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      sdr_(from.sdr_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:protobrain.CorticalSnapshot)
}

void CorticalSnapshot::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_CorticalSnapshot_snapshot_2eproto.base);
}

CorticalSnapshot::~CorticalSnapshot() {
  // @@protoc_insertion_point(destructor:protobrain.CorticalSnapshot)
  SharedDtor();
}

void CorticalSnapshot::SharedDtor() {
}

void CorticalSnapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CorticalSnapshot& CorticalSnapshot::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CorticalSnapshot_snapshot_2eproto.base);
  return *internal_default_instance();
}


void CorticalSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:protobrain.CorticalSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sdr_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CorticalSnapshot::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CorticalSnapshot*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .protobrain.SparseDistributedRepresentation sdr = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = ::google::protobuf::io::ReadSize(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::protobrain::SparseDistributedRepresentation::_InternalParse;
          object = msg->add_sdr();
          if (size > end - ptr) goto len_delim_till_end;
          ptr += size;
          GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
              {parser_till_end, object}, ptr - size, ptr));
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CorticalSnapshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobrain.CorticalSnapshot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobrain.SparseDistributedRepresentation sdr = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_sdr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobrain.CorticalSnapshot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobrain.CorticalSnapshot)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CorticalSnapshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobrain.CorticalSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protobrain.SparseDistributedRepresentation sdr = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sdr_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->sdr(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobrain.CorticalSnapshot)
}

::google::protobuf::uint8* CorticalSnapshot::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobrain.CorticalSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .protobrain.SparseDistributedRepresentation sdr = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->sdr_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->sdr(static_cast<int>(i)), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobrain.CorticalSnapshot)
  return target;
}

size_t CorticalSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobrain.CorticalSnapshot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protobrain.SparseDistributedRepresentation sdr = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->sdr_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->sdr(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CorticalSnapshot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobrain.CorticalSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const CorticalSnapshot* source =
      ::google::protobuf::DynamicCastToGenerated<CorticalSnapshot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobrain.CorticalSnapshot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobrain.CorticalSnapshot)
    MergeFrom(*source);
  }
}

void CorticalSnapshot::MergeFrom(const CorticalSnapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobrain.CorticalSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  sdr_.MergeFrom(from.sdr_);
}

void CorticalSnapshot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobrain.CorticalSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CorticalSnapshot::CopyFrom(const CorticalSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobrain.CorticalSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CorticalSnapshot::IsInitialized() const {
  return true;
}

void CorticalSnapshot::Swap(CorticalSnapshot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CorticalSnapshot::InternalSwap(CorticalSnapshot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&sdr_)->InternalSwap(CastToBase(&other->sdr_));
}

::google::protobuf::Metadata CorticalSnapshot::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_snapshot_2eproto);
  return ::file_level_metadata_snapshot_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SensorSnapshot::InitAsDefaultInstance() {
  ::protobrain::_SensorSnapshot_default_instance_._instance.get_mutable()->value_ = const_cast< ::protobrain::SensorValue*>(
      ::protobrain::SensorValue::internal_default_instance());
  ::protobrain::_SensorSnapshot_default_instance_._instance.get_mutable()->sdr_ = const_cast< ::protobrain::SparseDistributedRepresentation*>(
      ::protobrain::SparseDistributedRepresentation::internal_default_instance());
}
class SensorSnapshot::HasBitSetters {
 public:
  static const ::protobrain::SensorValue& value(const SensorSnapshot* msg);
  static void set_has_value(SensorSnapshot* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static const ::protobrain::SparseDistributedRepresentation& sdr(const SensorSnapshot* msg);
  static void set_has_sdr(SensorSnapshot* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

const ::protobrain::SensorValue&
SensorSnapshot::HasBitSetters::value(const SensorSnapshot* msg) {
  return *msg->value_;
}
const ::protobrain::SparseDistributedRepresentation&
SensorSnapshot::HasBitSetters::sdr(const SensorSnapshot* msg) {
  return *msg->sdr_;
}
void SensorSnapshot::clear_value() {
  if (value_ != nullptr) value_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
void SensorSnapshot::clear_sdr() {
  if (sdr_ != nullptr) sdr_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorSnapshot::kValueFieldNumber;
const int SensorSnapshot::kSdrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorSnapshot::SensorSnapshot()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobrain.SensorSnapshot)
}
SensorSnapshot::SensorSnapshot(const SensorSnapshot& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_value()) {
    value_ = new ::protobrain::SensorValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  if (from.has_sdr()) {
    sdr_ = new ::protobrain::SparseDistributedRepresentation(*from.sdr_);
  } else {
    sdr_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:protobrain.SensorSnapshot)
}

void SensorSnapshot::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SensorSnapshot_snapshot_2eproto.base);
  ::memset(&value_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sdr_) -
      reinterpret_cast<char*>(&value_)) + sizeof(sdr_));
}

SensorSnapshot::~SensorSnapshot() {
  // @@protoc_insertion_point(destructor:protobrain.SensorSnapshot)
  SharedDtor();
}

void SensorSnapshot::SharedDtor() {
  if (this != internal_default_instance()) delete value_;
  if (this != internal_default_instance()) delete sdr_;
}

void SensorSnapshot::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorSnapshot& SensorSnapshot::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SensorSnapshot_snapshot_2eproto.base);
  return *internal_default_instance();
}


void SensorSnapshot::Clear() {
// @@protoc_insertion_point(message_clear_start:protobrain.SensorSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(value_ != nullptr);
      value_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(sdr_ != nullptr);
      sdr_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SensorSnapshot::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SensorSnapshot*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .protobrain.SensorValue value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::protobrain::SensorValue::_InternalParse;
        object = msg->mutable_value();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      // optional .protobrain.SparseDistributedRepresentation sdr = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::protobrain::SparseDistributedRepresentation::_InternalParse;
        object = msg->mutable_sdr();
        if (size > end - ptr) goto len_delim_till_end;
        ptr += size;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->ParseExactRange(
            {parser_till_end, object}, ptr - size, ptr));
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SensorSnapshot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobrain.SensorSnapshot)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protobrain.SensorValue value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .protobrain.SparseDistributedRepresentation sdr = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_sdr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobrain.SensorSnapshot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobrain.SensorSnapshot)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SensorSnapshot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobrain.SensorSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobrain.SensorValue value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::value(this), output);
  }

  // optional .protobrain.SparseDistributedRepresentation sdr = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, HasBitSetters::sdr(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobrain.SensorSnapshot)
}

::google::protobuf::uint8* SensorSnapshot::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobrain.SensorSnapshot)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobrain.SensorValue value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::value(this), target);
  }

  // optional .protobrain.SparseDistributedRepresentation sdr = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, HasBitSetters::sdr(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobrain.SensorSnapshot)
  return target;
}

size_t SensorSnapshot::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobrain.SensorSnapshot)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .protobrain.SensorValue value = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *value_);
    }

    // optional .protobrain.SparseDistributedRepresentation sdr = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *sdr_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorSnapshot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobrain.SensorSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorSnapshot* source =
      ::google::protobuf::DynamicCastToGenerated<SensorSnapshot>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobrain.SensorSnapshot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobrain.SensorSnapshot)
    MergeFrom(*source);
  }
}

void SensorSnapshot::MergeFrom(const SensorSnapshot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobrain.SensorSnapshot)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_value()->::protobrain::SensorValue::MergeFrom(from.value());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_sdr()->::protobrain::SparseDistributedRepresentation::MergeFrom(from.sdr());
    }
  }
}

void SensorSnapshot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobrain.SensorSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorSnapshot::CopyFrom(const SensorSnapshot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobrain.SensorSnapshot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorSnapshot::IsInitialized() const {
  return true;
}

void SensorSnapshot::Swap(SensorSnapshot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorSnapshot::InternalSwap(SensorSnapshot* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(value_, other->value_);
  swap(sdr_, other->sdr_);
}

::google::protobuf::Metadata SensorSnapshot::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_snapshot_2eproto);
  return ::file_level_metadata_snapshot_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protobrain
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::protobrain::History* Arena::CreateMaybeMessage< ::protobrain::History >(Arena* arena) {
  return Arena::CreateInternal< ::protobrain::History >(arena);
}
template<> PROTOBUF_NOINLINE ::protobrain::Snapshot* Arena::CreateMaybeMessage< ::protobrain::Snapshot >(Arena* arena) {
  return Arena::CreateInternal< ::protobrain::Snapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::protobrain::CorticalSnapshot* Arena::CreateMaybeMessage< ::protobrain::CorticalSnapshot >(Arena* arena) {
  return Arena::CreateInternal< ::protobrain::CorticalSnapshot >(arena);
}
template<> PROTOBUF_NOINLINE ::protobrain::SensorSnapshot* Arena::CreateMaybeMessage< ::protobrain::SensorSnapshot >(Arena* arena) {
  return Arena::CreateInternal< ::protobrain::SensorSnapshot >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
