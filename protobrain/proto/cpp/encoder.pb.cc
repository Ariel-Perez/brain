// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: encoder.proto

#include "encoder.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_encoder_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_CyclicEncoder_encoder_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_encoder_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_SimpleEncoder_encoder_2eproto;
namespace protobrain {
class EncoderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Encoder> _instance;
} _Encoder_default_instance_;
class SimpleEncoderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SimpleEncoder> _instance;
} _SimpleEncoder_default_instance_;
class CyclicEncoderDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CyclicEncoder> _instance;
} _CyclicEncoder_default_instance_;
class SensorValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SensorValue> _instance;
  ::google::protobuf::int32 int__;
  float float__;
  ::google::protobuf::internal::ArenaStringPtr text_;
} _SensorValue_default_instance_;
}  // namespace protobrain
static void InitDefaultsEncoder_encoder_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobrain::_Encoder_default_instance_;
    new (ptr) ::protobrain::Encoder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobrain::Encoder::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Encoder_encoder_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEncoder_encoder_2eproto}, {}};

static void InitDefaultsSimpleEncoder_encoder_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobrain::_SimpleEncoder_default_instance_;
    new (ptr) ::protobrain::SimpleEncoder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobrain::SimpleEncoder::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SimpleEncoder_encoder_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSimpleEncoder_encoder_2eproto}, {}};

static void InitDefaultsCyclicEncoder_encoder_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobrain::_CyclicEncoder_default_instance_;
    new (ptr) ::protobrain::CyclicEncoder();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobrain::CyclicEncoder::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CyclicEncoder_encoder_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCyclicEncoder_encoder_2eproto}, {}};

static void InitDefaultsSensorValue_encoder_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::protobrain::_SensorValue_default_instance_;
    new (ptr) ::protobrain::SensorValue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::protobrain::SensorValue::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SensorValue_encoder_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSensorValue_encoder_2eproto}, {}};

void InitDefaults_encoder_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_Encoder_encoder_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SimpleEncoder_encoder_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CyclicEncoder_encoder_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SensorValue_encoder_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_encoder_2eproto[4];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors_encoder_2eproto[1];
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_encoder_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_encoder_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protobrain::Encoder, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobrain::Encoder, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::protobrain::Encoder, _extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobrain::Encoder, type_),
  PROTOBUF_FIELD_OFFSET(::protobrain::Encoder, shape_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::protobrain::SimpleEncoder, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobrain::SimpleEncoder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobrain::SimpleEncoder, min_value_),
  PROTOBUF_FIELD_OFFSET(::protobrain::SimpleEncoder, max_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobrain::CyclicEncoder, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobrain::CyclicEncoder, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::protobrain::CyclicEncoder, min_value_),
  PROTOBUF_FIELD_OFFSET(::protobrain::CyclicEncoder, max_value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protobrain::SensorValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protobrain::SensorValue, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::protobrain::SensorValue, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::protobrain::SensorValueDefaultTypeInternal, int__),
  offsetof(::protobrain::SensorValueDefaultTypeInternal, float__),
  offsetof(::protobrain::SensorValueDefaultTypeInternal, text_),
  PROTOBUF_FIELD_OFFSET(::protobrain::SensorValue, value_),
  ~0u,
  ~0u,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::protobrain::Encoder)},
  { 9, 16, sizeof(::protobrain::SimpleEncoder)},
  { 18, 25, sizeof(::protobrain::CyclicEncoder)},
  { 27, 36, sizeof(::protobrain::SensorValue)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::protobrain::_Encoder_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protobrain::_SimpleEncoder_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protobrain::_CyclicEncoder_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::protobrain::_SensorValue_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_encoder_2eproto = {
  {}, AddDescriptors_encoder_2eproto, "encoder.proto", schemas,
  file_default_instances, TableStruct_encoder_2eproto::offsets,
  file_level_metadata_encoder_2eproto, 4, file_level_enum_descriptors_encoder_2eproto, file_level_service_descriptors_encoder_2eproto,
};

const char descriptor_table_protodef_encoder_2eproto[] =
  "\n\rencoder.proto\022\nprotobrain\"\226\001\n\007Encoder\022"
  "-\n\004type\030\001 \001(\0162\037.protobrain.Encoder.Encod"
  "erType\022\r\n\005shape\030\002 \003(\005\"F\n\013EncoderType\022\013\n\007"
  "UNKNOWN\020\000\022\024\n\020NUMERICAL_SIMPLE\020\001\022\024\n\020NUMER"
  "ICAL_CYCLIC\020\002*\005\010d\020\365\003\"\201\001\n\rSimpleEncoder\022\021"
  "\n\tmin_value\030\001 \001(\002\022\025\n\tmax_value\030\002 \001(\002:\00210"
  "2F\n\016simple_encoder\022\023.protobrain.Encoder\030"
  "d \001(\0132\031.protobrain.SimpleEncoder\"\201\001\n\rCyc"
  "licEncoder\022\021\n\tmin_value\030\001 \001(\002\022\025\n\tmax_val"
  "ue\030\002 \001(\002:\002102F\n\016cyclic_encoder\022\023.protobr"
  "ain.Encoder\030e \001(\0132\031.protobrain.CyclicEnc"
  "oder\"F\n\013SensorValue\022\r\n\003int\030\001 \001(\005H\000\022\017\n\005fl"
  "oat\030\002 \001(\002H\000\022\016\n\004text\030\003 \001(\tH\000B\007\n\005value"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_encoder_2eproto = {
  false, InitDefaults_encoder_2eproto, 
  descriptor_table_protodef_encoder_2eproto,
  "encoder.proto", &assign_descriptors_table_encoder_2eproto, 516,
};

void AddDescriptors_encoder_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_encoder_2eproto, deps, 0);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_encoder_2eproto = []() { AddDescriptors_encoder_2eproto(); return true; }();
namespace protobrain {
const ::google::protobuf::EnumDescriptor* Encoder_EncoderType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&assign_descriptors_table_encoder_2eproto);
  return file_level_enum_descriptors_encoder_2eproto[0];
}
bool Encoder_EncoderType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Encoder_EncoderType Encoder::UNKNOWN;
const Encoder_EncoderType Encoder::NUMERICAL_SIMPLE;
const Encoder_EncoderType Encoder::NUMERICAL_CYCLIC;
const Encoder_EncoderType Encoder::EncoderType_MIN;
const Encoder_EncoderType Encoder::EncoderType_MAX;
const int Encoder::EncoderType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void Encoder::InitAsDefaultInstance() {
}
class Encoder::HasBitSetters {
 public:
  static void set_has_type(Encoder* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Encoder::kTypeFieldNumber;
const int Encoder::kShapeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Encoder::Encoder()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobrain.Encoder)
}
Encoder::Encoder(const Encoder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      shape_(from.shape_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  _extensions_.MergeFrom(from._extensions_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:protobrain.Encoder)
}

void Encoder::SharedCtor() {
  type_ = 0;
}

Encoder::~Encoder() {
  // @@protoc_insertion_point(destructor:protobrain.Encoder)
  SharedDtor();
}

void Encoder::SharedDtor() {
}

void Encoder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Encoder& Encoder::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_Encoder_encoder_2eproto.base);
  return *internal_default_instance();
}


void Encoder::Clear() {
// @@protoc_insertion_point(message_clear_start:protobrain.Encoder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _extensions_.Clear();
  shape_.Clear();
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Encoder::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<Encoder*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .protobrain.Encoder.EncoderType type = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val = ::google::protobuf::internal::ReadVarint(&ptr);
        if (!::protobrain::Encoder_EncoderType_IsValid(val)) {
          ::google::protobuf::internal::WriteVarint(1, val, msg->mutable_unknown_fields());
          break;
        }
        msg->set_type(static_cast<::protobrain::Encoder_EncoderType>(val));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // repeated int32 shape = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) == 16) {
          do {
            msg->add_shape(::google::protobuf::internal::ReadVarint(&ptr));
            GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
            if (ptr >= end) break;
          } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 16 && (ptr += 1));
          break;
        } else if (static_cast<::google::protobuf::uint8>(tag) != 18) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::google::protobuf::internal::PackedInt32Parser;
        object = msg->mutable_shape();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        if (size) ptr = parser_till_end(ptr, newend, object, ctx);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr == newend);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
      if ((800u <= tag && tag < 4008u)) {
        auto res = msg->_extensions_.ParseField(tag, {_InternalParse, msg}, ptr, end,
            internal_default_instance(), &msg->_internal_metadata_, ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
        continue;
      }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Encoder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobrain.Encoder)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protobrain.Encoder.EncoderType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::protobrain::Encoder_EncoderType_IsValid(value)) {
            set_type(static_cast< ::protobrain::Encoder_EncoderType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast<::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 shape = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (16 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16u, input, this->mutable_shape())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) == (18 & 0xFF)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_shape())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        if ((800u <= tag && tag < 4008u)) {
          DO_(_extensions_.ParseField(tag, input,
              internal_default_instance(),
              _internal_metadata_.mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobrain.Encoder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobrain.Encoder)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Encoder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobrain.Encoder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobrain.Encoder.EncoderType type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // repeated int32 shape = 2;
  for (int i = 0, n = this->shape_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->shape(i), output);
  }

  // Extension range [100, 501)
  _extensions_.SerializeWithCachedSizes(100, 501, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobrain.Encoder)
}

::google::protobuf::uint8* Encoder::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobrain.Encoder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .protobrain.Encoder.EncoderType type = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // repeated int32 shape = 2;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteInt32ToArray(2, this->shape_, target);

  // Extension range [100, 501)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 501, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobrain.Encoder)
  return target;
}

size_t Encoder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobrain.Encoder)
  size_t total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 shape = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->shape_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->shape_size());
    total_size += data_size;
  }

  // optional .protobrain.Encoder.EncoderType type = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Encoder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobrain.Encoder)
  GOOGLE_DCHECK_NE(&from, this);
  const Encoder* source =
      ::google::protobuf::DynamicCastToGenerated<Encoder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobrain.Encoder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobrain.Encoder)
    MergeFrom(*source);
  }
}

void Encoder::MergeFrom(const Encoder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobrain.Encoder)
  GOOGLE_DCHECK_NE(&from, this);
  _extensions_.MergeFrom(from._extensions_);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  shape_.MergeFrom(from.shape_);
  if (from.has_type()) {
    set_type(from.type());
  }
}

void Encoder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobrain.Encoder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Encoder::CopyFrom(const Encoder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobrain.Encoder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Encoder::IsInitialized() const {
  if (!_extensions_.IsInitialized()) {
    return false;
  }

  return true;
}

void Encoder::Swap(Encoder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Encoder::InternalSwap(Encoder* other) {
  using std::swap;
  _extensions_.Swap(&other->_extensions_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  shape_.InternalSwap(&other->shape_);
  swap(type_, other->type_);
}

::google::protobuf::Metadata Encoder::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_encoder_2eproto);
  return ::file_level_metadata_encoder_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SimpleEncoder::InitAsDefaultInstance() {
}
class SimpleEncoder::HasBitSetters {
 public:
  static void set_has_min_value(SimpleEncoder* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_max_value(SimpleEncoder* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimpleEncoder::kMinValueFieldNumber;
const int SimpleEncoder::kMaxValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SimpleEncoder::SimpleEncoder()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobrain.SimpleEncoder)
}
SimpleEncoder::SimpleEncoder(const SimpleEncoder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_value_, &from.min_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_value_) -
    reinterpret_cast<char*>(&min_value_)) + sizeof(max_value_));
  // @@protoc_insertion_point(copy_constructor:protobrain.SimpleEncoder)
}

void SimpleEncoder::SharedCtor() {
  min_value_ = 0;
  max_value_ = 10;
}

SimpleEncoder::~SimpleEncoder() {
  // @@protoc_insertion_point(destructor:protobrain.SimpleEncoder)
  SharedDtor();
}

void SimpleEncoder::SharedDtor() {
}

void SimpleEncoder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SimpleEncoder& SimpleEncoder::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SimpleEncoder_encoder_2eproto.base);
  return *internal_default_instance();
}


void SimpleEncoder::Clear() {
// @@protoc_insertion_point(message_clear_start:protobrain.SimpleEncoder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    min_value_ = 0;
    max_value_ = 10;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SimpleEncoder::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SimpleEncoder*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional float min_value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_min_value(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float max_value = 2 [default = 10];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_max_value(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SimpleEncoder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobrain.SimpleEncoder)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float min_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_min_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_value = 2 [default = 10];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_max_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobrain.SimpleEncoder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobrain.SimpleEncoder)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SimpleEncoder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobrain.SimpleEncoder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min_value(), output);
  }

  // optional float max_value = 2 [default = 10];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->max_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobrain.SimpleEncoder)
}

::google::protobuf::uint8* SimpleEncoder::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobrain.SimpleEncoder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min_value(), target);
  }

  // optional float max_value = 2 [default = 10];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->max_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobrain.SimpleEncoder)
  return target;
}

size_t SimpleEncoder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobrain.SimpleEncoder)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float min_value = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float max_value = 2 [default = 10];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimpleEncoder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobrain.SimpleEncoder)
  GOOGLE_DCHECK_NE(&from, this);
  const SimpleEncoder* source =
      ::google::protobuf::DynamicCastToGenerated<SimpleEncoder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobrain.SimpleEncoder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobrain.SimpleEncoder)
    MergeFrom(*source);
  }
}

void SimpleEncoder::MergeFrom(const SimpleEncoder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobrain.SimpleEncoder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      min_value_ = from.min_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_value_ = from.max_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SimpleEncoder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobrain.SimpleEncoder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimpleEncoder::CopyFrom(const SimpleEncoder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobrain.SimpleEncoder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleEncoder::IsInitialized() const {
  return true;
}

void SimpleEncoder::Swap(SimpleEncoder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SimpleEncoder::InternalSwap(SimpleEncoder* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(min_value_, other->min_value_);
  swap(max_value_, other->max_value_);
}

::google::protobuf::Metadata SimpleEncoder::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_encoder_2eproto);
  return ::file_level_metadata_encoder_2eproto[kIndexInFileMessages];
}


// ===================================================================

void CyclicEncoder::InitAsDefaultInstance() {
}
class CyclicEncoder::HasBitSetters {
 public:
  static void set_has_min_value(CyclicEncoder* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
  static void set_has_max_value(CyclicEncoder* msg) {
    msg->_has_bits_[0] |= 0x00000002u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CyclicEncoder::kMinValueFieldNumber;
const int CyclicEncoder::kMaxValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CyclicEncoder::CyclicEncoder()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobrain.CyclicEncoder)
}
CyclicEncoder::CyclicEncoder(const CyclicEncoder& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&min_value_, &from.min_value_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_value_) -
    reinterpret_cast<char*>(&min_value_)) + sizeof(max_value_));
  // @@protoc_insertion_point(copy_constructor:protobrain.CyclicEncoder)
}

void CyclicEncoder::SharedCtor() {
  min_value_ = 0;
  max_value_ = 10;
}

CyclicEncoder::~CyclicEncoder() {
  // @@protoc_insertion_point(destructor:protobrain.CyclicEncoder)
  SharedDtor();
}

void CyclicEncoder::SharedDtor() {
}

void CyclicEncoder::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CyclicEncoder& CyclicEncoder::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_CyclicEncoder_encoder_2eproto.base);
  return *internal_default_instance();
}


void CyclicEncoder::Clear() {
// @@protoc_insertion_point(message_clear_start:protobrain.CyclicEncoder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    min_value_ = 0;
    max_value_ = 10;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* CyclicEncoder::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<CyclicEncoder*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional float min_value = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 13) goto handle_unusual;
        msg->set_min_value(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional float max_value = 2 [default = 10];
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_max_value(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool CyclicEncoder::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobrain.CyclicEncoder)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float min_value = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (13 & 0xFF)) {
          HasBitSetters::set_has_min_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float max_value = 2 [default = 10];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          HasBitSetters::set_has_max_value(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobrain.CyclicEncoder)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobrain.CyclicEncoder)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void CyclicEncoder::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobrain.CyclicEncoder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_value = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->min_value(), output);
  }

  // optional float max_value = 2 [default = 10];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->max_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobrain.CyclicEncoder)
}

::google::protobuf::uint8* CyclicEncoder::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobrain.CyclicEncoder)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float min_value = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->min_value(), target);
  }

  // optional float max_value = 2 [default = 10];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->max_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobrain.CyclicEncoder)
  return target;
}

size_t CyclicEncoder::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobrain.CyclicEncoder)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional float min_value = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + 4;
    }

    // optional float max_value = 2 [default = 10];
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CyclicEncoder::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobrain.CyclicEncoder)
  GOOGLE_DCHECK_NE(&from, this);
  const CyclicEncoder* source =
      ::google::protobuf::DynamicCastToGenerated<CyclicEncoder>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobrain.CyclicEncoder)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobrain.CyclicEncoder)
    MergeFrom(*source);
  }
}

void CyclicEncoder::MergeFrom(const CyclicEncoder& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobrain.CyclicEncoder)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      min_value_ = from.min_value_;
    }
    if (cached_has_bits & 0x00000002u) {
      max_value_ = from.max_value_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CyclicEncoder::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobrain.CyclicEncoder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CyclicEncoder::CopyFrom(const CyclicEncoder& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobrain.CyclicEncoder)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CyclicEncoder::IsInitialized() const {
  return true;
}

void CyclicEncoder::Swap(CyclicEncoder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CyclicEncoder::InternalSwap(CyclicEncoder* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(min_value_, other->min_value_);
  swap(max_value_, other->max_value_);
}

::google::protobuf::Metadata CyclicEncoder::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_encoder_2eproto);
  return ::file_level_metadata_encoder_2eproto[kIndexInFileMessages];
}


// ===================================================================

void SensorValue::InitAsDefaultInstance() {
  ::protobrain::_SensorValue_default_instance_.int__ = 0;
  ::protobrain::_SensorValue_default_instance_.float__ = 0;
  ::protobrain::_SensorValue_default_instance_.text_.UnsafeSetDefault(
      &::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
class SensorValue::HasBitSetters {
 public:
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SensorValue::kIntFieldNumber;
const int SensorValue::kFloatFieldNumber;
const int SensorValue::kTextFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SensorValue::SensorValue()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobrain.SensorValue)
}
SensorValue::SensorValue(const SensorValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_value();
  switch (from.value_case()) {
    case kInt: {
      set_int_(from.int_());
      break;
    }
    case kFloat: {
      set_float_(from.float_());
      break;
    }
    case kText: {
      set_text(from.text());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:protobrain.SensorValue)
}

void SensorValue::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_SensorValue_encoder_2eproto.base);
  clear_has_value();
}

SensorValue::~SensorValue() {
  // @@protoc_insertion_point(destructor:protobrain.SensorValue)
  SharedDtor();
}

void SensorValue::SharedDtor() {
  if (has_value()) {
    clear_value();
  }
}

void SensorValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SensorValue& SensorValue::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_SensorValue_encoder_2eproto.base);
  return *internal_default_instance();
}


void SensorValue::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:protobrain.SensorValue)
  switch (value_case()) {
    case kInt: {
      // No need to clear
      break;
    }
    case kFloat: {
      // No need to clear
      break;
    }
    case kText: {
      value_.text_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void SensorValue::Clear() {
// @@protoc_insertion_point(message_clear_start:protobrain.SensorValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_value();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SensorValue::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<SensorValue*>(object);
  ::google::protobuf::int32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = ::google::protobuf::io::Parse32(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional int32 int = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        msg->set_int_(::google::protobuf::internal::ReadVarint(&ptr));
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        break;
      }
      // optional float float = 2;
      case 2: {
        if (static_cast<::google::protobuf::uint8>(tag) != 21) goto handle_unusual;
        msg->set_float_(::google::protobuf::io::UnalignedLoad<float>(ptr));
        ptr += sizeof(float);
        break;
      }
      // optional string text = 3;
      case 3: {
        if (static_cast<::google::protobuf::uint8>(tag) != 26) goto handle_unusual;
        ptr = ::google::protobuf::io::ReadSize(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("protobrain.SensorValue.text");
        object = msg->mutable_text();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto string_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(object, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
string_till_end:
  static_cast<::std::string*>(object)->clear();
  static_cast<::std::string*>(object)->reserve(size);
  goto len_delim_till_end;
len_delim_till_end:
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                               {parser_till_end, object}, size);
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SensorValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobrain.SensorValue)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 int = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_.int__)));
          set_has_int_();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float float = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (21 & 0xFF)) {
          clear_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &value_.float__)));
          set_has_float_();
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string text = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (26 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_text()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->text().data(), static_cast<int>(this->text().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protobrain.SensorValue.text");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobrain.SensorValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobrain.SensorValue)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SensorValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobrain.SensorValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (value_case()) {
    case kInt:
      ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->int_(), output);
      break;
    case kFloat:
      ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->float_(), output);
      break;
    case kText:
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->text().data(), static_cast<int>(this->text().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "protobrain.SensorValue.text");
      ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
        3, this->text(), output);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobrain.SensorValue)
}

::google::protobuf::uint8* SensorValue::InternalSerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobrain.SensorValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (value_case()) {
    case kInt:
      target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->int_(), target);
      break;
    case kFloat:
      target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->float_(), target);
      break;
    case kText:
      ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
        this->text().data(), static_cast<int>(this->text().length()),
        ::google::protobuf::internal::WireFormat::SERIALIZE,
        "protobrain.SensorValue.text");
      target =
        ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
          3, this->text(), target);
      break;
    default: ;
  }
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobrain.SensorValue)
  return target;
}

size_t SensorValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protobrain.SensorValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (value_case()) {
    // optional int32 int = 1;
    case kInt: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int_());
      break;
    }
    // optional float float = 2;
    case kFloat: {
      total_size += 1 + 4;
      break;
    }
    // optional string text = 3;
    case kText: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->text());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SensorValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobrain.SensorValue)
  GOOGLE_DCHECK_NE(&from, this);
  const SensorValue* source =
      ::google::protobuf::DynamicCastToGenerated<SensorValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobrain.SensorValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobrain.SensorValue)
    MergeFrom(*source);
  }
}

void SensorValue::MergeFrom(const SensorValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobrain.SensorValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.value_case()) {
    case kInt: {
      set_int_(from.int_());
      break;
    }
    case kFloat: {
      set_float_(from.float_());
      break;
    }
    case kText: {
      set_text(from.text());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
}

void SensorValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobrain.SensorValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SensorValue::CopyFrom(const SensorValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobrain.SensorValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SensorValue::IsInitialized() const {
  return true;
}

void SensorValue::Swap(SensorValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SensorValue::InternalSwap(SensorValue* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::google::protobuf::Metadata SensorValue::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_encoder_2eproto);
  return ::file_level_metadata_encoder_2eproto[kIndexInFileMessages];
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SimpleEncoder::kSimpleEncoderFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::protobrain::Encoder,
    ::google::protobuf::internal::MessageTypeTraits< ::protobrain::SimpleEncoder >, 11, false >
  SimpleEncoder::simple_encoder(kSimpleEncoderFieldNumber, *::protobrain::SimpleEncoder::internal_default_instance());
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CyclicEncoder::kCyclicEncoderFieldNumber;
#endif
::google::protobuf::internal::ExtensionIdentifier< ::protobrain::Encoder,
    ::google::protobuf::internal::MessageTypeTraits< ::protobrain::CyclicEncoder >, 11, false >
  CyclicEncoder::cyclic_encoder(kCyclicEncoderFieldNumber, *::protobrain::CyclicEncoder::internal_default_instance());

// @@protoc_insertion_point(namespace_scope)
}  // namespace protobrain
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::protobrain::Encoder* Arena::CreateMaybeMessage< ::protobrain::Encoder >(Arena* arena) {
  return Arena::CreateInternal< ::protobrain::Encoder >(arena);
}
template<> PROTOBUF_NOINLINE ::protobrain::SimpleEncoder* Arena::CreateMaybeMessage< ::protobrain::SimpleEncoder >(Arena* arena) {
  return Arena::CreateInternal< ::protobrain::SimpleEncoder >(arena);
}
template<> PROTOBUF_NOINLINE ::protobrain::CyclicEncoder* Arena::CreateMaybeMessage< ::protobrain::CyclicEncoder >(Arena* arena) {
  return Arena::CreateInternal< ::protobrain::CyclicEncoder >(arena);
}
template<> PROTOBUF_NOINLINE ::protobrain::SensorValue* Arena::CreateMaybeMessage< ::protobrain::SensorValue >(Arena* arena) {
  return Arena::CreateInternal< ::protobrain::SensorValue >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
