/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.protobrain.CorticalSnapshot', null, global);
goog.exportSymbol('proto.protobrain.History', null, global);
goog.exportSymbol('proto.protobrain.SensorSnapshot', null, global);
goog.exportSymbol('proto.protobrain.Snapshot', null, global);
goog.exportSymbol('proto.protobrain.SparseDistributedRepresentation', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobrain.SparseDistributedRepresentation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protobrain.SparseDistributedRepresentation.repeatedFields_, null);
};
goog.inherits(proto.protobrain.SparseDistributedRepresentation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobrain.SparseDistributedRepresentation.displayName = 'proto.protobrain.SparseDistributedRepresentation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobrain.History = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protobrain.History.repeatedFields_, null);
};
goog.inherits(proto.protobrain.History, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobrain.History.displayName = 'proto.protobrain.History';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobrain.Snapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobrain.Snapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobrain.Snapshot.displayName = 'proto.protobrain.Snapshot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobrain.CorticalSnapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.protobrain.CorticalSnapshot.repeatedFields_, null);
};
goog.inherits(proto.protobrain.CorticalSnapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobrain.CorticalSnapshot.displayName = 'proto.protobrain.CorticalSnapshot';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobrain.SensorSnapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobrain.SensorSnapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobrain.SensorSnapshot.displayName = 'proto.protobrain.SensorSnapshot';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protobrain.SparseDistributedRepresentation.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobrain.SparseDistributedRepresentation.prototype.toObject = function(opt_includeInstance) {
  return proto.protobrain.SparseDistributedRepresentation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobrain.SparseDistributedRepresentation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobrain.SparseDistributedRepresentation.toObject = function(includeInstance, msg) {
  var f, obj = {
    dimensionsList: jspb.Message.getRepeatedField(msg, 1),
    onBitsList: jspb.Message.getRepeatedField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobrain.SparseDistributedRepresentation}
 */
proto.protobrain.SparseDistributedRepresentation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobrain.SparseDistributedRepresentation;
  return proto.protobrain.SparseDistributedRepresentation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobrain.SparseDistributedRepresentation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobrain.SparseDistributedRepresentation}
 */
proto.protobrain.SparseDistributedRepresentation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addDimensions(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addOnBits(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobrain.SparseDistributedRepresentation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobrain.SparseDistributedRepresentation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobrain.SparseDistributedRepresentation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobrain.SparseDistributedRepresentation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDimensionsList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      1,
      f
    );
  }
  f = message.getOnBitsList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      2,
      f
    );
  }
};


/**
 * repeated int32 dimensions = 1;
 * @return {!Array<number>}
 */
proto.protobrain.SparseDistributedRepresentation.prototype.getDimensionsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.protobrain.SparseDistributedRepresentation.prototype.setDimensionsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.protobrain.SparseDistributedRepresentation.prototype.addDimensions = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.protobrain.SparseDistributedRepresentation.prototype.clearDimensionsList = function() {
  this.setDimensionsList([]);
};


/**
 * repeated int32 on_bits = 2;
 * @return {!Array<number>}
 */
proto.protobrain.SparseDistributedRepresentation.prototype.getOnBitsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<number>} value */
proto.protobrain.SparseDistributedRepresentation.prototype.setOnBitsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.protobrain.SparseDistributedRepresentation.prototype.addOnBits = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.protobrain.SparseDistributedRepresentation.prototype.clearOnBitsList = function() {
  this.setOnBitsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protobrain.History.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobrain.History.prototype.toObject = function(opt_includeInstance) {
  return proto.protobrain.History.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobrain.History} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobrain.History.toObject = function(includeInstance, msg) {
  var f, obj = {
    snapshotList: jspb.Message.toObjectList(msg.getSnapshotList(),
    proto.protobrain.Snapshot.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobrain.History}
 */
proto.protobrain.History.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobrain.History;
  return proto.protobrain.History.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobrain.History} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobrain.History}
 */
proto.protobrain.History.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protobrain.Snapshot;
      reader.readMessage(value,proto.protobrain.Snapshot.deserializeBinaryFromReader);
      msg.addSnapshot(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobrain.History.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobrain.History.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobrain.History} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobrain.History.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSnapshotList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.protobrain.Snapshot.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Snapshot snapshot = 1;
 * @return {!Array<!proto.protobrain.Snapshot>}
 */
proto.protobrain.History.prototype.getSnapshotList = function() {
  return /** @type{!Array<!proto.protobrain.Snapshot>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protobrain.Snapshot, 1));
};


/** @param {!Array<!proto.protobrain.Snapshot>} value */
proto.protobrain.History.prototype.setSnapshotList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.protobrain.Snapshot=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protobrain.Snapshot}
 */
proto.protobrain.History.prototype.addSnapshot = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.protobrain.Snapshot, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.protobrain.History.prototype.clearSnapshotList = function() {
  this.setSnapshotList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobrain.Snapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.protobrain.Snapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobrain.Snapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobrain.Snapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    cortex: (f = msg.getCortex()) && proto.protobrain.CorticalSnapshot.toObject(includeInstance, f),
    sensor: (f = msg.getSensor()) && proto.protobrain.SensorSnapshot.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobrain.Snapshot}
 */
proto.protobrain.Snapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobrain.Snapshot;
  return proto.protobrain.Snapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobrain.Snapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobrain.Snapshot}
 */
proto.protobrain.Snapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protobrain.CorticalSnapshot;
      reader.readMessage(value,proto.protobrain.CorticalSnapshot.deserializeBinaryFromReader);
      msg.setCortex(value);
      break;
    case 2:
      var value = new proto.protobrain.SensorSnapshot;
      reader.readMessage(value,proto.protobrain.SensorSnapshot.deserializeBinaryFromReader);
      msg.setSensor(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobrain.Snapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobrain.Snapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobrain.Snapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobrain.Snapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCortex();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protobrain.CorticalSnapshot.serializeBinaryToWriter
    );
  }
  f = message.getSensor();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.protobrain.SensorSnapshot.serializeBinaryToWriter
    );
  }
};


/**
 * optional CorticalSnapshot cortex = 1;
 * @return {?proto.protobrain.CorticalSnapshot}
 */
proto.protobrain.Snapshot.prototype.getCortex = function() {
  return /** @type{?proto.protobrain.CorticalSnapshot} */ (
    jspb.Message.getWrapperField(this, proto.protobrain.CorticalSnapshot, 1));
};


/** @param {?proto.protobrain.CorticalSnapshot|undefined} value */
proto.protobrain.Snapshot.prototype.setCortex = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.protobrain.Snapshot.prototype.clearCortex = function() {
  this.setCortex(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobrain.Snapshot.prototype.hasCortex = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SensorSnapshot sensor = 2;
 * @return {?proto.protobrain.SensorSnapshot}
 */
proto.protobrain.Snapshot.prototype.getSensor = function() {
  return /** @type{?proto.protobrain.SensorSnapshot} */ (
    jspb.Message.getWrapperField(this, proto.protobrain.SensorSnapshot, 2));
};


/** @param {?proto.protobrain.SensorSnapshot|undefined} value */
proto.protobrain.Snapshot.prototype.setSensor = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.protobrain.Snapshot.prototype.clearSensor = function() {
  this.setSensor(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobrain.Snapshot.prototype.hasSensor = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protobrain.CorticalSnapshot.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobrain.CorticalSnapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.protobrain.CorticalSnapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobrain.CorticalSnapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobrain.CorticalSnapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    sdrList: jspb.Message.toObjectList(msg.getSdrList(),
    proto.protobrain.SparseDistributedRepresentation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobrain.CorticalSnapshot}
 */
proto.protobrain.CorticalSnapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobrain.CorticalSnapshot;
  return proto.protobrain.CorticalSnapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobrain.CorticalSnapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobrain.CorticalSnapshot}
 */
proto.protobrain.CorticalSnapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protobrain.SparseDistributedRepresentation;
      reader.readMessage(value,proto.protobrain.SparseDistributedRepresentation.deserializeBinaryFromReader);
      msg.addSdr(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobrain.CorticalSnapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobrain.CorticalSnapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobrain.CorticalSnapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobrain.CorticalSnapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSdrList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.protobrain.SparseDistributedRepresentation.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SparseDistributedRepresentation sdr = 1;
 * @return {!Array<!proto.protobrain.SparseDistributedRepresentation>}
 */
proto.protobrain.CorticalSnapshot.prototype.getSdrList = function() {
  return /** @type{!Array<!proto.protobrain.SparseDistributedRepresentation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.protobrain.SparseDistributedRepresentation, 1));
};


/** @param {!Array<!proto.protobrain.SparseDistributedRepresentation>} value */
proto.protobrain.CorticalSnapshot.prototype.setSdrList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.protobrain.SparseDistributedRepresentation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.protobrain.SparseDistributedRepresentation}
 */
proto.protobrain.CorticalSnapshot.prototype.addSdr = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.protobrain.SparseDistributedRepresentation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.protobrain.CorticalSnapshot.prototype.clearSdrList = function() {
  this.setSdrList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobrain.SensorSnapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.protobrain.SensorSnapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobrain.SensorSnapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobrain.SensorSnapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    sdr: (f = msg.getSdr()) && proto.protobrain.SparseDistributedRepresentation.toObject(includeInstance, f),
    encodedvalue: jspb.Message.getOptionalFloatingPointField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobrain.SensorSnapshot}
 */
proto.protobrain.SensorSnapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobrain.SensorSnapshot;
  return proto.protobrain.SensorSnapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobrain.SensorSnapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobrain.SensorSnapshot}
 */
proto.protobrain.SensorSnapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.protobrain.SparseDistributedRepresentation;
      reader.readMessage(value,proto.protobrain.SparseDistributedRepresentation.deserializeBinaryFromReader);
      msg.setSdr(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setEncodedvalue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobrain.SensorSnapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobrain.SensorSnapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobrain.SensorSnapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobrain.SensorSnapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSdr();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.protobrain.SparseDistributedRepresentation.serializeBinaryToWriter
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional SparseDistributedRepresentation sdr = 1;
 * @return {?proto.protobrain.SparseDistributedRepresentation}
 */
proto.protobrain.SensorSnapshot.prototype.getSdr = function() {
  return /** @type{?proto.protobrain.SparseDistributedRepresentation} */ (
    jspb.Message.getWrapperField(this, proto.protobrain.SparseDistributedRepresentation, 1));
};


/** @param {?proto.protobrain.SparseDistributedRepresentation|undefined} value */
proto.protobrain.SensorSnapshot.prototype.setSdr = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.protobrain.SensorSnapshot.prototype.clearSdr = function() {
  this.setSdr(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobrain.SensorSnapshot.prototype.hasSdr = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float encodedValue = 2;
 * @return {number}
 */
proto.protobrain.SensorSnapshot.prototype.getEncodedvalue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.protobrain.SensorSnapshot.prototype.setEncodedvalue = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 */
proto.protobrain.SensorSnapshot.prototype.clearEncodedvalue = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobrain.SensorSnapshot.prototype.hasEncodedvalue = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.protobrain);
