/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.protobrain.CyclicEncoder', null, global);
goog.exportSymbol('proto.protobrain.Encoder', null, global);
goog.exportSymbol('proto.protobrain.Encoder.EncoderType', null, global);
goog.exportSymbol('proto.protobrain.SensorValue', null, global);
goog.exportSymbol('proto.protobrain.SimpleEncoder', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobrain.Encoder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, 3, proto.protobrain.Encoder.repeatedFields_, null);
};
goog.inherits(proto.protobrain.Encoder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobrain.Encoder.displayName = 'proto.protobrain.Encoder';
}

/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldInfo>}
 */
proto.protobrain.Encoder.extensions = {};


/**
 * The extensions registered with this message class. This is a map of
 * extension field number to fieldInfo object.
 *
 * For example:
 *     { 123: {fieldIndex: 123, fieldName: {my_field_name: 0}, ctor: proto.example.MyMessage} }
 *
 * fieldName contains the JsCompiler renamed field name property so that it
 * works in OPTIMIZED mode.
 *
 * @type {!Object<number, jspb.ExtensionFieldBinaryInfo>}
 */
proto.protobrain.Encoder.extensionsBinary = {};

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobrain.SimpleEncoder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobrain.SimpleEncoder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobrain.SimpleEncoder.displayName = 'proto.protobrain.SimpleEncoder';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobrain.CyclicEncoder = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.protobrain.CyclicEncoder, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobrain.CyclicEncoder.displayName = 'proto.protobrain.CyclicEncoder';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.protobrain.SensorValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.protobrain.SensorValue.oneofGroups_);
};
goog.inherits(proto.protobrain.SensorValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.protobrain.SensorValue.displayName = 'proto.protobrain.SensorValue';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.protobrain.Encoder.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobrain.Encoder.prototype.toObject = function(opt_includeInstance) {
  return proto.protobrain.Encoder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobrain.Encoder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobrain.Encoder.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getField(msg, 1),
    shapeList: jspb.Message.getRepeatedField(msg, 2)
  };

  jspb.Message.toObjectExtension(/** @type {!jspb.Message} */ (msg), obj,
      proto.protobrain.Encoder.extensions, proto.protobrain.Encoder.prototype.getExtension,
      includeInstance);
  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobrain.Encoder}
 */
proto.protobrain.Encoder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobrain.Encoder;
  return proto.protobrain.Encoder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobrain.Encoder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobrain.Encoder}
 */
proto.protobrain.Encoder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.protobrain.Encoder.EncoderType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.addShape(value);
      break;
    default:
      jspb.Message.readBinaryExtension(msg, reader,
        proto.protobrain.Encoder.extensionsBinary,
        proto.protobrain.Encoder.prototype.getExtension,
        proto.protobrain.Encoder.prototype.setExtension);
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobrain.Encoder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobrain.Encoder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobrain.Encoder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobrain.Encoder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.protobrain.Encoder.EncoderType} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getShapeList();
  if (f.length > 0) {
    writer.writeRepeatedInt32(
      2,
      f
    );
  }
  jspb.Message.serializeBinaryExtensions(message, writer,
    proto.protobrain.Encoder.extensionsBinary, proto.protobrain.Encoder.prototype.getExtension);
};


/**
 * @enum {number}
 */
proto.protobrain.Encoder.EncoderType = {
  UNKNOWN: 0,
  NUMERICAL_SIMPLE: 1,
  NUMERICAL_CYCLIC: 2
};

/**
 * optional EncoderType type = 1;
 * @return {!proto.protobrain.Encoder.EncoderType}
 */
proto.protobrain.Encoder.prototype.getType = function() {
  return /** @type {!proto.protobrain.Encoder.EncoderType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.protobrain.Encoder.EncoderType} value */
proto.protobrain.Encoder.prototype.setType = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 */
proto.protobrain.Encoder.prototype.clearType = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobrain.Encoder.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated int32 shape = 2;
 * @return {!Array<number>}
 */
proto.protobrain.Encoder.prototype.getShapeList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<number>} value */
proto.protobrain.Encoder.prototype.setShapeList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.protobrain.Encoder.prototype.addShape = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.protobrain.Encoder.prototype.clearShapeList = function() {
  this.setShapeList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobrain.SimpleEncoder.prototype.toObject = function(opt_includeInstance) {
  return proto.protobrain.SimpleEncoder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobrain.SimpleEncoder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobrain.SimpleEncoder.toObject = function(includeInstance, msg) {
  var f, obj = {
    minValue: jspb.Message.getOptionalFloatingPointField(msg, 1),
    maxValue: +jspb.Message.getFieldWithDefault(msg, 2, 10.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobrain.SimpleEncoder}
 */
proto.protobrain.SimpleEncoder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobrain.SimpleEncoder;
  return proto.protobrain.SimpleEncoder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobrain.SimpleEncoder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobrain.SimpleEncoder}
 */
proto.protobrain.SimpleEncoder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMinValue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMaxValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobrain.SimpleEncoder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobrain.SimpleEncoder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobrain.SimpleEncoder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobrain.SimpleEncoder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
};



/**
 * A tuple of {field number, class constructor} for the extension
 * field named `simpleEncoder`.
 * @type {!jspb.ExtensionFieldInfo<!proto.protobrain.SimpleEncoder>}
 */
proto.protobrain.SimpleEncoder.simpleEncoder = new jspb.ExtensionFieldInfo(
    100,
    {simpleEncoder: 0},
    proto.protobrain.SimpleEncoder,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.protobrain.SimpleEncoder.toObject),
    0);

proto.protobrain.Encoder.extensionsBinary[100] = new jspb.ExtensionFieldBinaryInfo(
    proto.protobrain.SimpleEncoder.simpleEncoder,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.protobrain.SimpleEncoder.serializeBinaryToWriter,
    proto.protobrain.SimpleEncoder.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
proto.protobrain.Encoder.extensions[100] = proto.protobrain.SimpleEncoder.simpleEncoder;

/**
 * optional float min_value = 1;
 * @return {number}
 */
proto.protobrain.SimpleEncoder.prototype.getMinValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.protobrain.SimpleEncoder.prototype.setMinValue = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 */
proto.protobrain.SimpleEncoder.prototype.clearMinValue = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobrain.SimpleEncoder.prototype.hasMinValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float max_value = 2;
 * @return {number}
 */
proto.protobrain.SimpleEncoder.prototype.getMaxValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 10.0));
};


/** @param {number} value */
proto.protobrain.SimpleEncoder.prototype.setMaxValue = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 */
proto.protobrain.SimpleEncoder.prototype.clearMaxValue = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobrain.SimpleEncoder.prototype.hasMaxValue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * A tuple of {field number, class constructor} for the extension
 * field named `simpleEncoder`.
 * @type {!jspb.ExtensionFieldInfo<!proto.protobrain.SimpleEncoder>}
 */
proto.protobrain.SimpleEncoder.simpleEncoder = new jspb.ExtensionFieldInfo(
    100,
    {simpleEncoder: 0},
    proto.protobrain.SimpleEncoder,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.protobrain.SimpleEncoder.toObject),
    0);

proto.protobrain.Encoder.extensionsBinary[100] = new jspb.ExtensionFieldBinaryInfo(
    proto.protobrain.SimpleEncoder.simpleEncoder,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.protobrain.SimpleEncoder.serializeBinaryToWriter,
    proto.protobrain.SimpleEncoder.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
proto.protobrain.Encoder.extensions[100] = proto.protobrain.SimpleEncoder.simpleEncoder;




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobrain.CyclicEncoder.prototype.toObject = function(opt_includeInstance) {
  return proto.protobrain.CyclicEncoder.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobrain.CyclicEncoder} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobrain.CyclicEncoder.toObject = function(includeInstance, msg) {
  var f, obj = {
    minValue: jspb.Message.getOptionalFloatingPointField(msg, 1),
    maxValue: +jspb.Message.getFieldWithDefault(msg, 2, 10.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobrain.CyclicEncoder}
 */
proto.protobrain.CyclicEncoder.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobrain.CyclicEncoder;
  return proto.protobrain.CyclicEncoder.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobrain.CyclicEncoder} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobrain.CyclicEncoder}
 */
proto.protobrain.CyclicEncoder.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMinValue(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMaxValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobrain.CyclicEncoder.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobrain.CyclicEncoder.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobrain.CyclicEncoder} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobrain.CyclicEncoder.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
};



/**
 * A tuple of {field number, class constructor} for the extension
 * field named `cyclicEncoder`.
 * @type {!jspb.ExtensionFieldInfo<!proto.protobrain.CyclicEncoder>}
 */
proto.protobrain.CyclicEncoder.cyclicEncoder = new jspb.ExtensionFieldInfo(
    101,
    {cyclicEncoder: 0},
    proto.protobrain.CyclicEncoder,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.protobrain.CyclicEncoder.toObject),
    0);

proto.protobrain.Encoder.extensionsBinary[101] = new jspb.ExtensionFieldBinaryInfo(
    proto.protobrain.CyclicEncoder.cyclicEncoder,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.protobrain.CyclicEncoder.serializeBinaryToWriter,
    proto.protobrain.CyclicEncoder.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
proto.protobrain.Encoder.extensions[101] = proto.protobrain.CyclicEncoder.cyclicEncoder;

/**
 * optional float min_value = 1;
 * @return {number}
 */
proto.protobrain.CyclicEncoder.prototype.getMinValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.protobrain.CyclicEncoder.prototype.setMinValue = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 */
proto.protobrain.CyclicEncoder.prototype.clearMinValue = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobrain.CyclicEncoder.prototype.hasMinValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float max_value = 2;
 * @return {number}
 */
proto.protobrain.CyclicEncoder.prototype.getMaxValue = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 10.0));
};


/** @param {number} value */
proto.protobrain.CyclicEncoder.prototype.setMaxValue = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 */
proto.protobrain.CyclicEncoder.prototype.clearMaxValue = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobrain.CyclicEncoder.prototype.hasMaxValue = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * A tuple of {field number, class constructor} for the extension
 * field named `cyclicEncoder`.
 * @type {!jspb.ExtensionFieldInfo<!proto.protobrain.CyclicEncoder>}
 */
proto.protobrain.CyclicEncoder.cyclicEncoder = new jspb.ExtensionFieldInfo(
    101,
    {cyclicEncoder: 0},
    proto.protobrain.CyclicEncoder,
     /** @type {?function((boolean|undefined),!jspb.Message=): !Object} */ (
         proto.protobrain.CyclicEncoder.toObject),
    0);

proto.protobrain.Encoder.extensionsBinary[101] = new jspb.ExtensionFieldBinaryInfo(
    proto.protobrain.CyclicEncoder.cyclicEncoder,
    jspb.BinaryReader.prototype.readMessage,
    jspb.BinaryWriter.prototype.writeMessage,
    proto.protobrain.CyclicEncoder.serializeBinaryToWriter,
    proto.protobrain.CyclicEncoder.deserializeBinaryFromReader,
    false);
// This registers the extension field with the extended class, so that
// toObject() will function correctly.
proto.protobrain.Encoder.extensions[101] = proto.protobrain.CyclicEncoder.cyclicEncoder;


/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.protobrain.SensorValue.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.protobrain.SensorValue.ValueCase = {
  VALUE_NOT_SET: 0,
  INT: 1,
  FLOAT: 2,
  TEXT: 3
};

/**
 * @return {proto.protobrain.SensorValue.ValueCase}
 */
proto.protobrain.SensorValue.prototype.getValueCase = function() {
  return /** @type {proto.protobrain.SensorValue.ValueCase} */(jspb.Message.computeOneofCase(this, proto.protobrain.SensorValue.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.protobrain.SensorValue.prototype.toObject = function(opt_includeInstance) {
  return proto.protobrain.SensorValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.protobrain.SensorValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobrain.SensorValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    pb_int: jspb.Message.getField(msg, 1),
    pb_float: jspb.Message.getOptionalFloatingPointField(msg, 2),
    text: jspb.Message.getField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.protobrain.SensorValue}
 */
proto.protobrain.SensorValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.protobrain.SensorValue;
  return proto.protobrain.SensorValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.protobrain.SensorValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.protobrain.SensorValue}
 */
proto.protobrain.SensorValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setInt(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFloat(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.protobrain.SensorValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.protobrain.SensorValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.protobrain.SensorValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.protobrain.SensorValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 int = 1;
 * @return {number}
 */
proto.protobrain.SensorValue.prototype.getInt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.protobrain.SensorValue.prototype.setInt = function(value) {
  jspb.Message.setOneofField(this, 1, proto.protobrain.SensorValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 */
proto.protobrain.SensorValue.prototype.clearInt = function() {
  jspb.Message.setOneofField(this, 1, proto.protobrain.SensorValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobrain.SensorValue.prototype.hasInt = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float float = 2;
 * @return {number}
 */
proto.protobrain.SensorValue.prototype.getFloat = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.protobrain.SensorValue.prototype.setFloat = function(value) {
  jspb.Message.setOneofField(this, 2, proto.protobrain.SensorValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 */
proto.protobrain.SensorValue.prototype.clearFloat = function() {
  jspb.Message.setOneofField(this, 2, proto.protobrain.SensorValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobrain.SensorValue.prototype.hasFloat = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string text = 3;
 * @return {string}
 */
proto.protobrain.SensorValue.prototype.getText = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.protobrain.SensorValue.prototype.setText = function(value) {
  jspb.Message.setOneofField(this, 3, proto.protobrain.SensorValue.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 */
proto.protobrain.SensorValue.prototype.clearText = function() {
  jspb.Message.setOneofField(this, 3, proto.protobrain.SensorValue.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.protobrain.SensorValue.prototype.hasText = function() {
  return jspb.Message.getField(this, 3) != null;
};


goog.object.extend(exports, proto.protobrain);
